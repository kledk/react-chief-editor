{"version":3,"sources":["../../src/defaultTheme.tsx","../../src/chief/utils/with-chief-on-plugIn.tsx","../../src/chief/utils/create-editor.tsx","../../src/chief/chief-context.tsx","../../src/chief/utils/saved-selection.tsx","../../src/chief/chief.tsx","../../src/utils.ts","../../src/override-theme.tsx","../../src/chief/hooks/use-chief.tsx","../../src/chief/handlers/handleRenderLeaf.tsx","../../src/chief/utils/matches-type.tsx","../../src/chief/handlers/handleRenderElement.tsx","../../src/chief/editor.tsx","../../src/chief/handlers/handleDecorate.tsx","../../src/chief/handlers/handleKeyDown.tsx","../../src/chief/handlers/handleKeyUp.tsx","../../src/chief/chief-presentation.tsx","../../src/chief/hooks/use-labels.tsx","../../src/chief/hooks/use-on-key-down.tsx","../../src/chief/hooks/use-plugin.tsx","../../src/chief/hooks/use-render-element.tsx","../../src/chief/hooks/use-render-leaf.tsx","../../src/placeholder-hint.tsx","../../src/leaf-renderer.tsx","../../src/ui/ui-wrap.tsx","../../src/ui/button-base.tsx","../../src/ui/styled-toolbar-btn.tsx","../../src/element-hover-tip.tsx","../../src/ToolbarBtn.tsx","../../src/mark-button.tsx","../../src/shortcut.ts","../../src/chief/controls/index.tsx","../../src/addons/italic/index.tsx","../../src/addons/underline/index.tsx","../../src/addons/strikethrough/index.tsx","../../src/addons/headings/Heading.tsx","../../src/addons/headings/index.tsx","../../src/addons/prevent-newline/index.tsx","../../src/addons/reset-to-paragraph/index.tsx","../../src/addons/labels/index.tsx","../../src/addons/paragraph/paragraph-element.tsx","../../src/addons/paragraph/index.tsx","../../src/addons/bold/index.tsx","../../src/FileUpload.tsx","../../node_modules/ts-is-present/lib/index.js","../../src/addons/image/ImageExtensions.ts","../../src/show.tsx","../../src/element-wrapper.tsx","../../src/Focused.ts","../../src/ToolsWrapper.tsx","../../src/StyledToolBox.tsx","../../src/ui/StyledFocusToolbar.tsx","../../src/ui/WithAttentionToolbar.tsx","../../src/InputWrapper.tsx","../../src/ui/button.tsx","../../src/ToolBtnPopup.tsx","../../src/addons/image/image-element.tsx","../../src/addons/image/index.tsx","../../src/addons/link/index.tsx","../../src/element-utils.ts","../../src/addons/lists/transforms.ts","../../src/element-renderer.tsx","../../src/chief/chief-state.ts","../../src/addons/lists/index.tsx","../../src/addons/lists/controls.tsx","../../src/addons/block-tab/index.tsx","../../src/ToolDivider.tsx","../../src/addons/block-insert-tool/block-insert-controls.tsx","../../src/addons/block-insert-tool/block-insert.tsx","../../src/addons/hovering-tool/hover-tool-controls.tsx","../../src/chief/utils/use-highlight-selection.tsx","../../src/chief/hooks/use-decoration.tsx","../../src/addons/hovering-tool/hovering-tool.tsx","../../src/addons/text-color/index.tsx","App.tsx","index.tsx"],"names":["defaultTheme","colors","primary","seconday","gray","100","200","300","400","500","600","700","800","900","originalEntries","createEditor","plugins","editor","useMemo","withReact","withHistory","createSlateEditor","Object","value","prop","editorFn","plugin","withChiefOnPlugIn","useChiefRenderCore","useState","setRenderLeafs","it","toSlicer","setRenderElements","removeRenderElement","ChiefContext","React","count","savedSelectionContext","useSaveSelection","context","useContext","Error","SavedSelectionProvider","props","useSlate","editorRef","useRef","useCallback","selection","sRef","Editor","setSaveSelection","setTimeout","ReactEditor","Transforms","savedSelection","useProvideContext","isChiefElement","element","Chief","theme","_theme","merge","chiefValue","Boolean","id","current","setOnKeyHandlers","a","b","onKeyDownHandlers","setInjectedPlugins","OnPlugins","labels","setInjectedLabels","setDecorations","removeDecoration","useProvideChiefContext","useErrorBoundary","error","onChange","isNodeActive","at","match","n","type","useOnClickOutside","ref","handler","useEffect","listener","event","document","getNodeFromSelection","path","getAncestor","level","parent","node","e","OverrideTheme","name","useChief","ctx","handleRenderLeaf","renderLeafs","copy","leaf","renderLeaf","children","matchesType","typeMatch","Array","handleRenderElement","renderElements","renderElement","RichEditor","insertBlock","text","EditorThemeWrapper","styled","decorations","otherProps","decorate","entry","ranges","result","handleDecorate","keyDown","isHotkey","handleKeyDown","keyUp","SlateEditor","handleKeyUp","click","paste","clipboardData","onDOMBeforeInput","onKeyDown","onKeyUp","onClick","onPaste","readOnly","useLabels","injectLabels","getLabel","label","injectedLabels","useOnKeyDown","deps","chief","usePlugin","useRenderElement","ire","useRenderLeaf","irl","PlaceholderHint","leafType","rectType","elementProps","Leaf","attributes","uiStyle","css","UiWrap","ButtonBase","StyledToolbarBtn","ElementHoverTip","containerRef","overlayRef","useHover","handleMouseOver","setValue","handleMouseOut","isOverlayHovering","handleMove","bounds","setOver","rect","x","y","window","useGlobalHover","isOverlayHoveringRef","isHoveringRef","setShow","delayed","overlayProps","overlay","show","container","target","triggerRef","placement","arrowProps","style","contentEditable","position","width","StyledTooltipBody","Arrow","p","Tooltip","ToolbarBtn","tip","tooltip","onMouseDown","toggleFormat","format","isFormatted","isMark","Text","split","MarkBtn","markType","isActive","shortcutText","shortcut","toKeyName","ControlsContext","useControlsProvider","useProvideControlContext","setControls","controls","removeControl","useProvidedControls","useControl","control","injectControl","ItalicControl","category","render","key","defaultLabel","_renderLeaf","Presenter","ItalicAddon","pattern","UnderlineControl","UnderlineAddon","StrikethroughControl","StrikethroughAddon","Heading","useEditor","isFocused","useFocused","isSelected","useSelected","placeholder","h1","h2","h3","h4","h5","h6","isEmpty","undefined","headingTypes","HeadingControl","heading","_e","HeadingsAddon","_props","Range","Element","PreventNewlineAddon","ResetToParagraphAddon","deleteBackward","isParagraph","LabelsAddon","ParagraphElement","hoverHint","hint","ParagraphControl","Component","ParagraphAddon","showHint","showPlaceholder","ParagraphPresenter","BoldAddon","action","BoldControl","HiddenFileInput","FileUpload","defineProperty","exports","t","Show","ElementWrapper","isFocusedWithin","focus","Path","setFocus","onMouseEnter","setInside","onMouseLeave","when","zIndex","ToolsWrapper","StyledToolBase","StyledToolBox","StyledFocusToolBtn","StyledFocusToolbar","WithAttentionToolbar","renderElementProps","attentionChildren","right","marginTop","marginRight","Input","InputWrapper","Button","ToolBtnPopup","toolWindow","modifiers","options","offset","ImageBlock","focused","selected","handleSubmitEmbed","embedUrl","url","align","setIsReplacing","handleDelete","onRemoved","handleUpload","onOpenFileRequest","handleResize","w","h","height","toggleReplace","handleClick","imageHandler","isReplacing","src","btns","renderContent","renderToolBtn","tprops","display","justifyContent","onResize","resize","overflow","draggable","objectFit","alt","caption","onSubmit","setEmbedUrl","disabled","isUrl","outline","StyledImageEmptyContainer","isImageElement","ImageControl","insertImage","image","getAllImageNodes","mode","anchor","findNodes","images","ImageAddon","fileRef","isVoid","insertData","data","files","file","reader","handleFile","imageRef","onUploadedSuccess","onUploadedFailed","dataUrl","HistoryEditor","imageUrls","JSON","accept","multiple","LinkAddon","insertText","wrapLink","isInline","isLinkELement","href","LinkControl","isLinkActive","onClose","unwrapLink","isCollapsed","link","edge","LinkPopup","saveSelection","linkWrapperRef","linkNode","_linkNode","setUrl","handleInsertLink","insertLink","handleUnlink","padding","minWidth","flexDirection","autoFocus","rounded","toggleList","isElementActive","TYPE_LIST_ITEM","list","addionalProps","getState","point","isSelectionExpanded","isSelectionCollapsed","isElementEmpty","Node","elementType","TYPE_UNORDERED_LIST","TYPE_ORDERED_LIST","LIST_TYPES","Ul","Ol","Li","_renderElement","ListsAddon","normalizeNode","includes","ancestor","active","getActiveNode","listParent","index","otherList","destination","to","child","ListControl","BlockTabAddon","priority","ToolDivider","BlockInsertControls","groupedControls","groupBy","i","ii","renderControl","BlockInsertBtn","BlockInsert","toolboxRef","setShowMenu","hoveredNode","rootNode","firstDOMPoint","setNode","err","useHoveredNode","handleBlockInsert","showMenu","top","left","setCoords","coords","HoverToolControls","eligableControls","useHighlightSelection","decoration","useDecoration","decorator","highlightSelection","hoverToolContext","HoverTools","isEditorFocused","currentNode","isReadOnly","backgroundColor","setEnabled","enabled","onChangeEnabled","HoveringTool","deltaoffset","setDeltaOffset","toolRef","getBoundingClientRect","bottom","domNode","_setV","console","domSelection","domRange","deltaOffset","referenceElement","_v","TextColorAddon","color","TextColorControl","ColorSelector","wrapperRef","handleChangeTextColor","margin","cursor","Icon","size","editorLabels","ContentStyle","div","App","log","flex","overrides","marginLeft","mdiFormatParagraph","mdiFormatHeader1","mdiFormatHeader2","mdiFormatHeader3","mdiFormatHeader4","mdiFormatHeader5","mdiFormatHeader6","mdiFormatListNumbered","mdiFormatListBulleted","mdiImage","mdiFormatBold","mdiFormatItalic","mdiFormatStrikethrough","mdiFormatUnderline","mdiLink","mdiFormatColorText","spellCheck","minHeight","ReactDOM","getElementById"],"mappings":"uwPAEaA,GAAiC,CAC5CC,OAAQ,CACNC,QADM,UAENC,SAFM,UAGNC,KAAM,CACJC,IADI,UAEJC,IAFI,UAGJC,IAHI,UAIJC,IAJI,UAKJC,IALI,UAMJC,IANI,UAOJC,IAPI,UAQJC,IARI,UASJC,IAAK,aCXX,IAAIC,GAAJ,GCGO,MAAMC,GAAgBC,IAC3B,MAAMC,EAASC,kBAAQ,IAAMC,YAAUC,YAAYC,gBAAnD,IACA,OAAOH,kBAAQ,IDEjB,SAAkCD,EAAqBD,GAIrD,cAA4BM,eAA5B,kBAAoD,6BAAzC,EAAyC,KAApD,EAAoD,KAClD,oBAAWC,IACHC,KAAN,KACEV,SAEFG,KAAe,SACb,IAAIQ,EAAWX,GAAf,GADa,oBAEb,GAFa,IAEb,2BAA8B,OAA9B,EAA8B,QACxBY,GAAUF,KAAd,IACEC,EAAWC,GAAUA,OAArBD,KAJS,8BAOb,OAAOA,KAAP,KAKN,SCvBqBE,CAAkBV,EAAzB,GAA2C,CAAzD,K,SCWcW,aACwBC,mBAAtC,IADcD,mBACR,EADQA,KACR,EADQA,OAE8BC,mBAA5C,IAFcD,mBAER,EAFQA,KAER,EAFQA,KA6Bd,MAAO,gCAxBP,YACEE,EAAeC,GAAM,MAArBD,KAuBK,iBApBP,YACEA,EAAeC,IACb,MAAMC,EAAW,IAAjB,GAEA,OADAA,SAAgBA,UAAhBA,MACA,KAgBG,qCAZP,YACEC,EAAkBF,GAAM,MAAxBE,KAiBAC,oBAdF,YACED,EAAkBF,IAChB,MAAMC,EAAW,IAAjB,GAEA,OADAA,SAAgBD,UAAhBC,MACA,MA+BC,MAAMG,GAAeC,kBAArB,MACP,IAAIC,GAAJ,ECjEA,MAAMC,GAAwBF,uBAA9B,GAIA,SAAgBG,KACd,MAAMC,EAAUC,qBAAhB,IACA,MACE,MAAM,IAAIC,MAAV,8BAEF,SAGF,SAAgBC,GAAuBC,GACrC,MAAMrB,EAQR,WACE,MAAMN,EAAS4B,cACTC,EAAYC,iBAAlB,GACAD,YAHF,QAK6CjB,mBAA3C,MALF,mBAKQ,EALR,KAKQ,EALR,KAuBE,MAAO,eAjBemB,sBAAaC,IACjC,UAAIA,EAAoB,CACtB,MAAMC,EAAOC,eAAb,GAEA,OADAC,KACO,KACDF,EAAJ,SACEG,WAAW,KACTC,UAAkBR,EAAlBQ,SACAC,WAAkBT,EAAlBS,QAAqCL,EAArCK,SACAH,QACAF,WAJFG,IASN,MAAO,IAAP,MAfF,IAiBwBG,kBA/BVC,GACd,OACE,kBAACnB,GAAD,UAAgCf,MAAOA,GACpCqB,EAFL,U,SCVcc,GAAeC,GAC7B,gBAAQA,OA4CV,MAAaC,GAAQ,UAAW,kBAQxB,EAAN,EAAM,WAAN,EAAM,WAAN,EAAM,QAAN,EAAM,WAAN,EAAM,GAA2CC,EAAjD,EAAiDA,MAC3CC,EAASC,IAAM,GAAI/D,GAAzB,GACMgE,EFOR,SAAuCpB,WAISf,mBAA9C,IAJqCe,mBAI/B,EAJ+BA,KAI/B,EAJ+BA,OAKOf,mBAA5C,IALqCe,mBAK/B,EAL+BA,KAK/B,EAL+BA,OAMKf,mBAA1C,IANqCe,mBAM/B,EAN+BA,KAM/B,EAN+BA,OAOCf,mBAAtC,IAPqCe,mBAO/B,EAP+BA,KAO/B,EAP+BA,KAQ/B3B,EAASF,GAAf,GARqC6B,EASLf,mBAASoC,QAAQrB,EAAjD,WATqCA,mBAS/B,EAT+BA,KAS/B,EAT+BA,KAUpBsB,EAAOnB,iBAAOH,2BAA0BP,OAAjD8B,QAqER,OAnBW,2BACNvC,MADM,IAAsB,0DApCjC,YACEwC,EAAiBrC,GACf,cAAyB,CAACsC,EAAGC,IAC3BD,aAAeC,EAAfD,WAAgCA,sBAFpCD,KAmC+B,mBA5BjC,YACEA,EAAiBrC,IACf,MAAMC,EAAW,IAAjB,GAEA,OADAA,SAAgBD,UAAhBC,MACA,KAgCFuC,kBAR+B,eAhDjC,YACEC,EAAmBxD,GAAW,MAA9BwD,KA+C+B,aA5CjC,YACEA,EAAmBzC,IACjB,MAAMC,EAAW,IAAjB,GAEA,OADAA,SAAgBA,UAAhBA,MACA,KAmDFyC,UAX+B,EAY/BC,OAZ+B,eAJjC,YACEC,EAAkB5C,GAAM,YAAC,kBAAY2C,KAGN,+BApBjC,YACEE,EAAe7C,GACb,cAAwB,CAACsC,EAAGC,IAC1BD,aAAeC,EAAfD,WAAgCA,sBAFpCO,KAmCAC,iBA5BF,YACED,EAAe7C,IACb,MAAMC,EAAW,IAAjB,GAEA,OADAA,SAAgBD,UAAhBC,MACA,OE3De8C,CAAuB,YAAYZ,OAVxB,EAWaa,cAArC,EAXwB,EAWxB,cAXwB,EAWxB,SAXwB,EAWGC,MACjC,OACE5C,yBACE,uBAAOnB,OAAQ+C,EAAW/C,OAAQM,MAAOA,EAAO0D,SAAUA,GACxD,kBAAC9C,GAAD,UAAuBZ,MAAOyC,GAC5B5B,0BACE,uBAAeyB,MAAOC,GACpB1B,kBAACA,IAADA,cANZ,WCNK,MA2EM8C,GAAe,CAACjE,EAAD,WAClBgC,EAAR,EAAQA,UACR,MACE,SAHwB,QAKV,YAAqB,CACnCkC,GADmC,EAEnCC,MAAOC,GAAKA,SAAWC,IAEzB,QAT0B,qBAY5B,SAAgBC,GACdC,EACAC,GAEAC,oBACE,KACE,MAAMC,EAAYC,IAEXJ,EAAD,UAAgBA,mBAAqBI,EAAzC,SAIAH,MAMF,OAHAI,yCACAA,0CAEO,KACLA,4CACAA,+CASJ,CAACL,EAzBHE,IA6BF,SAAgBI,GAAqB7E,EAAgBgC,GACnD,KAAe,SACIE,WAAjB,GAAM,EADO,oBAEb,GAAI4C,EAAJ,OAAiB,SACE5C,aAAjB,GACA,OAFe,qBAKnB,YAGK,MAWM6C,GAAc,CAAC/E,EAAD,EAAkCgF,EAAlC,KACzB,IAAIC,EAAJ,KACI7D,EAAJ,EACA,KAAO8D,GAAQ9D,IAAf,GAAgC,CAC9BA,IACA,IACE,MAAM0D,EAAOzC,eAAb,GACA,OAAIyC,SACF,YAGF,GADAG,EAAS/C,gBAAT+C,GACIA,IAAJ,EACE,YAEFC,IACA,MAAOC,KAEX,U,SCjOcC,GACdC,EACA1D,GAQA,GAAIA,mBAAyBA,kBAA7B,GACE,OAAOA,kBAAP,G,SCTY2D,KACd,MAAMC,EAAM/D,qBAAZ,IACA,MACE,MAAM,IAAIC,MAAV,8FAIF,S,SCPc+D,GACd7D,EACA8D,EACAzF,GAEA,IAAI0F,EAAO,eAAK/D,GAFhB3B,oBAGA,GAHAA,IAGA,2BAAsC,OAC9B2F,EAD8B,QACvBC,aAAb,GACA,IACEF,EAAO,8BAAH,IAAcG,SAAUF,MANhC3F,8BASA,OAAOmB,0CAAUuE,EAAVvE,YAA4BuE,EAAnC,U,SCbcI,GACdpD,EACAqD,GAEA,OACGC,kBAA4BD,WAAmBrD,EAAhD,OACsB,kBAAdqD,GAA0BA,IAAcrD,EADhD,MAEAM,QAAQ+C,qBAA+BrD,aAHzC,I,SCDcuD,GACdtE,EACAuE,EACAlG,GAEA,MAFAA,oBAGA,GAHAA,IAGA,2BAA0C,KAA1C,EAA0C,cAEtCmG,iBACAL,GAAYnE,EAAD,QAAgBwE,EAF7B,cAIMA,EAAJ,UACEzD,EAAUvB,kBAACgF,EAADhF,2BAAVuB,IACSyD,EAAJ,gBACLzD,EACE,oBAAOyD,EAAP,cACIA,kBADJ,GAEIhF,iBAAmBgF,EAAnBhF,kBAHNuB,KAXN1C,8BAmBA,OAAkB0C,GAAWvB,kBAACA,IAADA,cAA7B,M,aCLWiF,GAAa,gCAAH,IAErBC,YAAYrG,EAAD,GACJiE,GAAajE,EAAlB,GAMEsC,kBAA+B,CAC7B+B,KAD6B,EAE7BwB,SAAU,CAAC,CAAES,KAAM,OAPrBhE,eAA4B,CAC1B+B,KAD0B,EAE1BwB,SAAU,CAAC,CAAES,KAAM,UAWrBC,GAAqBC,IAAH,kBACpB7E,GAASyD,GAAc,SAD3B,IAIalD,GAAS,SAElBP,IADF,QAaM2D,KARE,EALR,EAKQ,SALR,EAKQ,WALR,EAKQ,KALR,EAKQ,cALR,EAKQ,iBALR,EAKQ,kBAOJmB,EAZJ,EAYIA,YAEI,EAAN,EAAM,SAAeC,EAdvB,YAcE,EAdF,cAgBQP,EAAgBpE,sBACnBJ,GACQsE,GAAoB,EAAD,EAA1B,GAMF,CARF,IAWML,EAAa7D,sBAChBJ,GACQ6D,GAAiB7D,EAAO8D,EAA/B,GAEF,CAJF,IAOMkB,EAAW5E,sBACd6E,GC3EuB,EAAC,EAAD,OAK5B,IAAIC,EAAJ,GAL4B,oBAM5B,GAN4B,IAM5B,2BAAiC,CAC/B,MAAMC,EADyB,QAChBH,YAAf,GACA,KACE,OAAQE,EAASA,SAAjB,IATwB,8BAY5B,UD+D0BE,CAAeH,EAAO5G,EADlB,GAE1B,CAFF,IAKMgH,EAAUjF,sBACb4C,GEhFsB,EAAC,EAAD,2BAK3B,GAL2B,IAK3B,2BAAmC,KAAnC,EAAmC,QACjC,GAAIH,EAAJ,SACE,GACEyC,IAASzC,EAAD,QAAkBG,EAA1BsC,cACAzC,UAAgBG,EAAhBH,YAFF,GAIE,YAEG,UAAIA,WACLA,UAAgBG,EAAhBH,YAAJ,GACE,QAfqB,gCFiFd0C,CAAcvC,EAAO3E,EAA5B,GAEF,CAJF,IAQMmH,EAAQpF,sBAAa4C,IGrFJ,EAAC,EAAD,WAIjB3C,EAAR,EAAQA,UACR,MACE,OANuB,QAQRoF,WAAjB,GAAM,EARmB,oBASzB,IAAKtC,EAAL,OACE,OAVuB,QAYRsC,aAAjB,GAZyB,qBHsFrBC,CAAY1C,EAAZ0C,IADF,IAIMC,EAAQvF,sBACX4C,MADH,IAKM4C,EAAQxF,sBAAa4C,IACHA,EAAtB,cACmB6C,QAAnB,SAFF,IAUMC,EAAmB1F,sBAAYoD,MAArC,IAEA,OACEhE,kBAACA,IAADA,cACE,4BAEE,qCACEsG,iBAAkBA,EAClB7B,WAAYA,EACZO,cAAeA,EACfQ,SAAUA,EACVe,UAAWV,EACXW,QAASR,EACTS,QAASN,EACTO,QAASN,EACTO,SAAUA,EACV7E,GAAE,UAAKA,IAdf,QIrF6B9B,kBAAjC,M,SCvBgB4G,GAAUtE,WACyB6B,KAA3C,EADkB7B,EAChBA,OAAwBuE,EADRvE,EACQuE,aAC1BC,EAAWlG,sBACdmG,GACC,kBAAWC,EAAeD,EAAtB,KACKC,EAAeD,EAAtB,KAEKA,EAAP,aAEF,CAPF,IAgBA,OANAzD,oBAAU,KACR,GACEuD,MAFJvD,IAMO,CAACwD,EAAR,G,SCVcG,GAAa5D,EAAqB6D,EAAc,IAC9D,MAAMC,EAAQhD,KACdb,oBAAU,KACR,OAAID,WACF8D,wBAEK,IAAMA,qBAAb,IAJF7D,G,SCVc8D,GAAU9H,GACxB,MAAM6H,EAAQhD,KACdb,oBAAU,KACR6D,kBACO,IAAMA,eAAb,IAFF7D,I,SCFc+D,GACdC,EACAJ,EAAc,IAEd,MAAMC,EAAQhD,KACdb,oBAAU,KACR6D,yBACO,IAAMA,sBAAb,IAFF7D,G,SCLciE,GAAcC,EAAyBN,EAAc,IACnE,MAAMC,EAAQhD,KACdb,oBAAU,KACR6D,sBACO,IAAMA,mBAAb,IAFF7D,G,aCHWmE,GAAkBpC,IAAH,mBASZ7E,GACVA,WAAiBA,EAAjBA,aAAsCA,qBAAtCA,EACIA,EAXkB,YAUtBA,GASUA,GACVA,WAAiBA,EAAjBA,YAAqCA,EAArCA,YACIA,EADJA,UAEIA,WAAiBA,EAAjBA,YACAA,EADAA,YAtBkB,GA0BxBA,GAASyD,GAAc,kBA1BpB,I,SCASQ,GACdjE,EACAkH,EACAC,EACAC,SAEM,EAAN,EAAM,SACN,GADA,EAAkBpD,KAClB,GACE,OACExE,yCACGA,sBAFL,IASJ,MAAM6H,GAAQrH,IAAD,MACL,EAAN,EAAM,WAAckE,EAApB,EAAoBA,SACpB,OAAO,0CAAUoD,GAAYpD,SAAUA,M,UCnBlC,MAAMqD,GAAUC,YAAH,cAOhBxH,GAASyD,GAAc,KAPpB,IAUMgE,GAAS5C,IAAH,kBAAZ,I,OCVA,MAAM6C,GAAa7C,IAAH,wBAQnB7E,GAASyD,GAAc,aARpB,I,OCCA,MAAMkE,GAAmB9C,YAAH,GAAGA,CAAH,cAQL7E,GAClBA,kBAA6BA,oBATN,KAYLA,GAASA,oBAZJ,KAoBVA,GAAUA,qBApBA,EAsBlBA,GAAUA,WAAiBA,eAAjBA,aAtBQ,EAwBzBA,GAASyD,GAAc,mBAxBpB,I,8CCESmE,GACd5H,GAcA,MAAM6H,EAAe1H,iBAArB,MACM2H,EAAa3H,iBAAnB,MAfAH,ErB6BF,WAAgB+H,QAIY9I,oBAA1B,GAJc8I,mBAIR,EAJQA,KAIR,EAJQA,KAMRnF,EAAMzC,iBAAZ,MAEM6H,EAAkB,IAAMC,GAA9B,GACMC,EAAiB,IAAMD,GAA7B,GAmBA,OAjBAnF,oBACE,KACE,MAAMS,EAAOX,EAAb,QACA,KAIE,OAHAW,kCACAA,iCAEO,KACLA,qCACAA,sCAKN,CAACX,EAdHE,UAiBO,CAACF,EAAR,GqBzCiCmF,GAhBjC/H,mBAgBM,EAhBNA,KAgBM,EAhBNA,KAiBMmI,ErBVuBpH,KAAD,QACJ9B,oBAAxB,GAD4B,mBACtB,EADsB,KACtB,EADsB,KAGtBmJ,EAAahI,sBAChB4C,IACC,KAAa,CACX,MAAMqF,EAAStH,EAAf,wBACAuH,GAhBiBC,EAgBAF,EAhBD,EAgBSrF,EAAT,QAhBA,EAgBwBA,EAAxCsF,QAdJE,GAAKD,EAALC,MACAA,GAAKD,OAAYA,EADjBC,OAEAC,GAAKF,EAFLC,KAGAC,GAAKF,MAAWA,EAJlB,SADsB,IAACA,EAAD,KAmBpB,CAPF,IAgBA,OANAzF,oBAAU,KACR4F,uCACO,KACLA,4CAED,CALH5F,IAMA,GqBT0B6F,CAAeb,EAAzC,SACMc,EAAuBzI,iBAA7B,GACAyI,YACA,MAAMC,EAAgB1I,iBAAtB,GACA0I,YArBA7I,QAsBwBf,mBAAxB,GAtBAe,mBAsBM,EAtBNA,KAsBM,EAtBNA,KAuBA8C,oBAAU,KACR,EACEgG,MACSC,EACTtI,WAAW,KAAOmI,EAAD,SAAiCE,GAAxC,GAAVrI,KAEAqI,OAED,CARHhG,IASAA,oBAAU,KACR,GACErC,WAAW,KAAOoI,EAAD,SAA0BC,GAAjC,GAAVrI,MAED,CAJHqC,IAhCA9C,MAqCM,EAAN,EAAM,WAAN,EAAM,MAAN,EAAM,QAA6BgJ,EArCnChJ,YAqCA,EArCAA,8BAsCMiJ,EACJzJ,qCACEoD,IAAKkF,EACLoB,KAAM7H,YAAgB6H,EACtBC,UAAWtB,EACXuB,OAAQC,GAJV7J,GAOG,EAAC,qBAAqB8J,eACrB,sCAAatJ,GAAOsJ,UAAWA,IAC7B,sCACMC,GACJD,UAAWA,EACXE,MAAOD,EAAWC,SAEpBhK,0BAfR,KAoBM2J,EACJ,yBACEM,iBAAiB,EACjBD,MAAO,CAAEE,SAAF,WAAwBC,MAAO,QACtC/G,IAAKiF,IAGT,0BAAW3D,EAEP1E,kBAACA,IAADA,gBAEG0E,EAASmF,EAFZ7J,GADF,GASEA,kBAACA,IAADA,gBAEE,0BAAMoD,IAAKyG,GAFb7J,GADF,GAUG,MAAMoK,GAAoB/E,YAAH,GAAGA,CAAH,cAajB7E,GAASA,oBAbf,MAiBM6J,GAAQhF,IAAH,kBAMdiF,IACA,OAAQA,EAAR,WACE,WACE,OAAOtC,YAAP,eAKF,YACE,OAAOA,YAAP,eAKF,UACE,OAAOA,YAAP,eAKF,aACE,OAAOA,YAAP,eAKF,QACE,YAKKuC,GAAUlF,IAAH,kBAIhBiF,IACA,OAAQA,EAAR,WACE,WACE,OAAOtC,YAAP,cAGF,YACE,OAAOA,YAAP,cAGF,UACE,OAAOA,YAAP,cAGF,aACE,OAAOA,YAAP,cAGF,QACE,YCtJKwC,GAAa,eAA6B,CAAChK,EAAO4C,KAAR,MAC/C,EAAN,EAAM,UAAN,EAAM,cAAN,EAAM,QAAoCmC,EADW,YACrD,EADqD,uCAEpCqB,KAAX,EAF+C,oBAIrD,OACE,sBACEkD,UAAU,MACVW,IACEC,GACE1K,kBAACA,IAADA,cACEA,6BACEA,gCAASsC,EAAOoI,EAFpB1K,SAIEA,6BAAM0K,EAJR1K,YASJA,oCACEoD,IAAKA,EACLuH,YAAc3G,IACZ,EACEyC,KAGFkE,GAAeA,EAAfA,KArBR,O,SClBcC,GAAa/L,EAAgBgM,GAC3C,IAAIC,EAAcC,GAAOlM,EAAzB,GACAsC,eAEE,CAAE,KAAW2J,GACb,CAAE9H,MAAOC,GAAK+H,WAAd,GAA8BC,OAAO,IAIzC,MAAMF,GAAS,CAAClM,EAAD,aACG,YAAqB,CACnCmE,MAAOC,GAAKpB,QAAQoB,EAAD,MADf,EADO,oBAIb,OAAOpB,QAAP,IAGF,SAAgBqJ,GACd1K,GAIA,EAAQ2K,SAJR3K,MAIiC+E,EAJjC/E,YAIA,EAJAA,cAKM3B,EAAS4B,cACT2K,EAAWL,GAAOlM,EAAQ2B,EAAhC,UACA,OACER,oCACEoL,SAAUA,EACVT,YAAc3G,IACZA,mBACA4G,GAAa/L,EAAQ2B,EAArBoK,YALN,I,SC3BcS,GAAaC,GAC3B,OAAOC,+CAAP,cCKF,MAAMC,GAAkBxL,kBAAxB,MAoBA,SAAgByL,KACd,MAAMtM,EAjBR,WAAgBuM,QACkBjM,mBAAhC,IADciM,mBACR,EADQA,KACR,EADQA,KAad,MAAO,0BAXP,YACEC,EAAYC,GAAY,MAAxBD,KAUgCE,cAPlC,YACEF,EAAYhM,IACV,MAAMC,EAAW,IAAjB,GAEA,OADAA,SAAgBA,UAAhBA,MACA,MAOU8L,GACd,MAAO,CAAC,GAAR,GAGF,SAAgBI,KACd,MAAM1H,EAAM/D,qBAAZ,IACA,MACE,MAAM,IAAIC,MAAV,yCAEF,SAGF,SAAgByL,GACdC,WAEyCF,KAAnC,EAFNE,EAEM,cAAiBH,EAFvBG,EAEuBH,cAKvB,OAJAvI,oBAAU,KACR2I,KACO,IAAMJ,EAAb,IAFFvI,IAIA,KCnCF,SAAgB4I,GAAc1L,GAoB5B,OAnBAuL,GAAW,CACTI,SADS,QAETC,OAAQ,IAEJ,sBACE1B,QAAS,CACP3D,MAAO,CACLsF,IADK,eAELC,aAAc,UAEhBhB,SAAUD,GAbtB,UAeUF,SAAS,UAER3K,EAXL,YAgBJ,KAGF,MAAM+L,GAAkC,CACtC9H,WAAYjE,GAASiE,GAAWjE,EAAO,SAAU,OAG7CgM,GAAwB,CAC5BhI,KAAM+H,IAGR,SAAgBE,GAAYjM,GAW1B,OAVAoG,GAAUpG,EAAVoG,QACAW,OACAN,GAAa,CACXyF,QArCJ,QAsCIrJ,QAAS,CAACG,EAAO3E,KACf2E,mBACAoH,GAAa/L,EAAb+L,WACA,KAGJ,KAGF6B,gBC7CA,SAAgBE,GAAiBnM,GAoB/B,OAnBAuL,GAAW,CACTI,SADS,QAETC,OAAQ,IAEJ,sBACE1B,QAAS,CACP3D,MAAO,CACLsF,IADK,kBAELC,aAAc,aAEhBhB,SAAUD,GAbtB,UAeUF,SAAS,aAER3K,EAXL,YAgBJ,KAGF,MAAM+L,GAAkC,CACtC9H,WAAYjE,GAASiE,GAAWjE,EAAO,YAAa,MAGhDgM,GAAwB,CAC5BhI,KAAM+H,IAGR,SAAgBK,GAAepM,GAW7B,OAVAoG,GAAUpG,EAAVoG,QACAW,OACAN,GAAa,CACXyF,QArCJ,QAsCIrJ,QAAS,CAACG,EAAO3E,KACf2E,mBACAoH,GAAa/L,EAAb+L,cACA,KAGJ,KAGFgC,gBC7CA,SAAgBC,GAAqBrM,GAoBnC,OAnBAuL,GAAW,CACTI,SADS,QAETC,OAAQ,IAEJ,sBACE1B,QAAS,CACP3D,MAAO,CACLsF,IADK,sBAELC,aAAc,kBAEhBhB,SAAUD,GAbtB,UAeUF,SAAS,iBAER3K,EAXL,YAgBJ,KAGF,MAAM+L,GAAkC,CACtC9H,WAAYjE,GAASiE,GAAWjE,EAAO,gBAAiB,MAGpDgM,GAAwB,CAC5BhI,KAAM+H,IAGR,SAAgBO,GAAmBtM,GAWjC,OAVAoG,GAAUpG,EAAVoG,QACAW,OACAN,GAAa,CACXyF,QArCJ,QAsCIrJ,QAAS,CAACG,EAAO3E,KACf2E,mBACAoH,GAAa/L,EAAb+L,kBACA,KAGJ,KAGFkC,gBCrDO,MAAMC,GAAWvM,IACtB,MAAM3B,EAASmO,cACTC,EAAYC,cACZC,EAAaC,cAHE,EAYFxG,KACnB,IAAIyG,GAAcvG,EAbG,qBAaM,CACzBuF,IAAK,oBAAF,OAAsB7L,UADA,KACtB,gBACH8L,aAX8B,CAC9BgB,GAD8B,YAE9BC,GAF8B,YAG9BC,GAH8B,YAI9BC,GAJ8B,YAK9BC,GAL8B,YAM9BC,GAAI,aAKkCnN,UAAD,QAGvC,OAAOR,kBACLQ,UADKR,KAELQ,EAFKR,WAGL,sBACE4N,QAAS7M,cAAuBP,EAAvBO,SACTsM,YAAaJ,YAAwCY,GAEpDrN,EAPL,YCVWsN,GAAe,CAAC,KAAM,KAAM,KAAM,KAAM,KAA9C,MAEP,SAAgBC,GAAevN,GAI7B,MA2BA,OADAuL,IA1BA,EA0BqCvL,EAArCuL,QAvBS,CACLI,SADK,WAELC,OAAQvN,GACN,sBACE6L,QAAS,CACP3D,MAAO,CACLsF,IAAK,oBAAF,OADE,EACF,gBACHC,aAAc0B,IAGlB5C,SAAUtI,GAAajE,EAAQmP,GAC/BrD,YACEsD,IAEA/M,aACA+D,sBAGDzE,YAAkBwN,EAfrB,kBAqBN,KAGF,MAAMxB,GAAwB,CAC5BjL,QAAS,CACPqD,UADO,GAEPI,cAAexE,GACbR,kBAAoBQ,UAApBR,UAA8CQ,EAA9CR,YAIN,SAAgBkO,GAAcC,GA+B5B,OA9BA9G,GAAiB,CACfzC,UADe,GAEfI,cAAexE,GAASR,4CAE1BiH,GAAa,CACXyF,QADW,QAEXrJ,QAAS,CAACG,EAAO3E,KAAR,MACCgC,EAAR,EAAQA,UACR,GAAIA,GAAauN,gBAAjB,GAA+C,SAC7B,YAAqB,CACnCpL,MAAOC,IAAC,YACN,kBAAOA,EAAPC,MAA8BrB,QAAO,UAACoB,EAAD,yBAACA,QADhC,gBADJ,EADuC,oBAK7C,KAAW,CACTO,mBADS,MAEH,EAFG,YAET,EAFS,MAWT,OARI6K,kBAA2BtN,cAA/B,GACEI,eAA4B,CAAE+B,KAAM,cAEpC/B,kBAA+B,CAC7B+B,KAD6B,YAE7BwB,SAAU,CAAC,CAAES,KAAM,QAGvB,GAGJ,YAGJ,K,SCrFcmJ,GAAoB9N,GAalC,OAZAyG,GAAa,CACXyF,QADW,cAEXrJ,QAAS,CAACG,EAAO3E,OACXA,cAAoBuP,gBAAkBvP,EAA1C,cACE2E,mBACAA,oBACA3E,oBACA,KAKN,K,SCdc0P,KAmBd,OAlBAnH,GAAU,CACRoH,eAAgB,CAAC,EAAD,IAA4B,eAClC3N,EAAR,EAAQA,UACR,GAAIA,GAAauN,gBAAjB,GAA+C,SACtBrN,aAAvB,GAD6C,mBACvC,EADuC,KACvC,EADuC,KAEvC0N,EAAN,cAAoB3K,OACpB,GACEH,qBADF,IAIE9C,eAEA,OAAO,eAA4B,CAAEqC,KAAM,cAG/C,OAAOsL,KAAP,MAGJ,KFiHFN,gB,SGnIgBQ,GAAYlO,GAE1B,OADAoG,GAAUpG,EAAVoG,QACA,K,SCKc+H,GACdnO,GAEA,MAAM3B,EAAS4B,cACTwM,EAAYC,cACZC,EAAaC,cACnB,OACEpN,uCAAOQ,EAAPR,YACE,sBACE4N,QAAS3H,cAA4BzF,EAA5ByF,SACT2I,UAAWpO,EAAMqO,KACjBxB,YAAaJ,KAA0BzM,EAA1ByM,iBAA8CY,GAE1D7N,iBAAmBQ,EAAnBR,SAAmCL,GAP1C,KCJF,SAAgBmP,GAAiBtO,GAC/B,OAAOuL,GAAW,CAChBI,SADgB,OAEhB4C,UAAW,KACT,MAAMlQ,EAAS4B,cACf,OACE,sBACEiK,QAAS,CACP3D,MAAO,CACLsF,IADK,iCAELC,aAAc,cAGlBlB,SAAUtI,GAAajE,EAAQ,aAC/B8L,YAAa,KACX1F,8BACA/D,eAGDV,EAdL,aAqBN,SAAgBwO,IAAe,SAC7BC,GAD6B,kBAE7BC,GAF6B,SAG7B5M,IAH6B,QAQVsE,GAAnB,GAAM,EARuB,oBAoC7B,OA3BAS,GACE,CACEzC,UAvCN,YAwCMI,cAAexE,GACb,oCACEqO,KACEI,EACInI,EAAS,CACPuF,IADO,0BAEPC,aAAc,+BAEhBuB,EAENR,YACE6B,EACIpI,EAAS,CACPuF,IADO,iCAEPC,aAAc,cAEhBuB,GAfR,KAqBJ,CAzBFxG,IA2BA,KAGF,MAAM8H,GAAiC,CACrC5N,QAAS,CACPqD,UArEJ,YAsEII,cAAexE,GAASR,2BAAIQ,EAAJR,YAI5BgP,gBCxEA,MAIMzC,GAAkC,CACtC9H,WAAYjE,GAASiE,GAAWjE,EAAO,OAAQ,WAGjD,SAAgB4O,GAAU5O,GAexB,OAVAoG,GAAUpG,EAAVoG,QACAW,OACAN,GAAa,CACXyF,QAhBJ,QAiBIrJ,QAAS,CAACG,EAAO3E,KACf2E,mBAhBU3E,KAAwB+L,GAAa/L,EAArD,SAiBMwQ,KACA,KAGJ,KAGF,MAAM7C,GAAwB,CAC5BhI,KAAM+H,IAGR,SAAgB+C,GAAY9O,GAC1B,OAAOuL,GAAW,CAChBI,SADgB,QAEhB4C,UAAW,IAEP,sBACErE,QAAS,CACP3D,MAAO,CACLsF,IADK,aAELC,aAAc,QAEhBhB,SAAUD,GAzCtB,UA2CUF,SAAS,QAER3K,EAXL,YAkBN4O,gB,OC9DA,MAAMG,GAAkB,gBAAmB,CACzCrM,KAAM,QADgB,CAAH,cAaRsM,GAAa,eAGxB,CAAChP,EAAO4C,IAAQ,oCAAiBA,IAAKA,GAHjC,K,qFCfPlE,OAAOuQ,eAAeC,EAAS,aAAc,CAAEvQ,OAAO,IAItDuQ,EAAA,UAHA,SAAmBC,GACf,YAAa9B,IAAN8B,GAAyB,OAANA,GAM9BD,EAAA,UAHA,SAAmBC,GACf,YAAa9B,IAAN8B,GAMXD,EAAA,SAHA,SAAkBC,GACd,OAAa,OAANA,O,yHCXJ,MCEMC,GAAQpP,IAAD,MAIZ,EAAN,EAAM,KAAQkE,EAAd,EAAcA,SACd,OAAK7C,QAAL,GAGO7B,kCAAP,GAFE,M,SCFY6P,GACdrP,SAKM,EAAN,EAAM,WAAN,EAAM,UAAN,EAAM,oBAAN,EAAM,MAMD+E,GANL,EAAM,WALN/E,YAKA,EALAA,kEAaQsP,EChBiB/L,KACzB,MAAMlF,EAAS4B,cACPI,EAAR,EAAQA,UAFgB,EAGEpB,mBAAS,CACjCwN,WADiC,EAEjC6C,iBAAiB,IALK,mBAGlB,EAHkB,KAGlB,EAHkB,KAsBxB,OAfAxM,oBAAU,KACR,MACE,OAEF,MAAMK,EAAOzC,eAAb,GACA,IAAI+L,GAAJ,EACI6C,GAAJ,EACA,KAAe,OACLC,EAAR,EAAQA,MACRD,EAAkBE,iBAAkBD,EAAlBC,KAAlBF,GACA7C,EAAY+C,WAAYD,EAAZC,KAAZ/C,GAEFgD,EAAS,aAAaH,qBACrB,CAAC/L,EAbJT,IAeA,GDN4B4J,CAA5B,GAAQ4C,gBAbRtP,EAc4Bf,oBAA5B,GAdAe,mBAcM,EAdNA,KAcM,EAdNA,KAeQmG,EAAaxC,KAAbwC,SAOR,OACE3G,uC,wBACwB,IACtBkQ,aATgB,MAClB,GAAaC,GAAb,IASEC,aAPgB,KAClBD,OAOEnG,MAAO,CAAEE,SAAU,aAJrBlK,GAOE,sBAAMqQ,MAAO1J,IAAamJ,GAAd,IACV,yBAAK9F,MAAK,aAAIE,SAAF,WAAwBoG,OAAxB,GAAsCtG,IARtDhK,IADF,G,OE5BK,MAAMuQ,GAAelL,IAAH,kB,UCGlB,MAAMmL,GAAiBnL,YAAH,GAAGA,CAAH,cAOdoL,GAAgBpL,YAAH,GAAGA,CAAH,aAEtB7E,GAASyD,GAAc,gBAFpB,I,UCPA,MAAMyM,GAAqBrL,YAAH,GAAGA,CAAH,cAmBlBsL,GAAqBtL,YAAH,GAAGA,CAAH,c,SCjBfuL,GACdpQ,SAKM,EAAN,EAAM,OAAN,EAAM,SAAqBqQ,EAL3BrQ,YAKA,EALAA,qBAMA,OACE,sCACMqQ,GACJC,kBACE9Q,0BACEA,0BADFA,IAIFgK,MAAO,CAAE+G,MAAF,EAAYC,UAAZ,EAA0BC,YAAa,KARlD,G,gBCXWC,GAAQ7L,gBAAmB7E,IAAS,IAA5B6E,CAAH,cAcL8L,GAAe,cAAiB3Q,IAAS,CACpD,qBAAqB,IADK,CAAH,aAAlB,I,OCbA,MAAM4Q,GAAS/L,YAAH,GAAGA,CAAH,aACG7E,GAASA,eADZ,QASKA,GAASA,oBATd,KAUNA,GAASA,oBAVf,M,SCES6Q,GAAa7Q,WAWHf,oBAAxB,GAX2Be,mBAWrB,EAXqBA,KAWrB,EAXqBA,KAYrB8Q,EAAa3Q,iBAAnB,MACAwC,GAAkBmO,EAAYtN,IACvBA,EAAL,kBACEsF,MAEFtF,qBAEF,MAAM+B,EAAiB/B,IACrB,KAAIA,WACFsF,OAOJ,OAJArC,GAAa,CACXyF,QAASlM,EADE,SAEX6C,QAAS,IAAMiG,GAAO,KAGtB,2BACE,2BACG,EAAGlG,SACF5C,EAAA,cACE,OAEEmK,YAAa3G,IACXA,mBACAsF,QARZ,IAeE,uBACEQ,UAAU,eACVyH,UAAW,CACT,CACErN,KADF,SAEEsN,QAAS,CACPC,OAAQ,cAKb,EAAC,0BAAyB1H,gBACzB,yBAAK3G,IAAKA,EAAK4G,MAAOA,E,iBAAuBF,GAC1CJ,GACC,yBAAKnD,UAAWR,EAAe3C,IAAKkO,GACjC9Q,gBAHP,IAME,yBAAK4C,IAAK2G,EAAW3G,IAAK4G,MAAOD,EAAWC,W,OCjDjD,MAAM0H,GACXlR,IAKA,MAAMmR,EAAUzE,cACV0E,EAAWxE,cACXvO,EAAS4B,cACPkG,EAAaxC,KAAbwC,SACF,EAAN,EAAM,oBAAN,EAAM,UAAmCkK,EAVjB,YAUxB,EAVwB,mCAWlB,EAAN,EAAM,UAAN,EAAM,SAAqB/I,EAA3B,EAA2BA,WAXH,EAaQrI,mBAAS8B,OAAzC,IAbwB,mBAalB,EAbkB,KAalB,EAbkB,OAcc9B,oBAAtC,GAdwB,mBAclB,EAdkB,KAclB,EAdkB,KAgBlBoS,EAAoBjR,sBACvBoD,IACCA,mBACI8N,SAAJ,IACE3Q,eAEE,CACE4Q,IADF,EAEEC,MAAO,UAET,CACEjP,GAAI7B,oBAGR,GACE+Q,QAIN,CAACH,EAnBH,IAsBAxO,oBAAU,KACJ/B,OAAJ,GACE0Q,OAED,CAAC1Q,EAJJ+B,MAMA,MAAM4O,EAAetR,sBAAY,KAC/BuR,GAAaA,EAAU5Q,EAAvB4Q,KACAhR,aAA0B,CAAE4B,GAAI7B,qBAC/B,CAHH,IAKMkR,EAAexR,sBAAY,KAC/ByR,GAAqBA,KACpB,CAFH,IAIMC,EAAe1R,sBAAY,CAAC2R,EAAGC,KACnCrR,eAEE,CACEgJ,MADF,EAEEsI,OAAQD,GAEV,CACEzP,GAAI7B,qBARV,IAaM8Q,EAAQpR,sBAAaoR,IACzB7Q,eAEE,CACE6Q,SAEF,CACEjP,GAAI7B,qBAPV,IAYMwR,EAAgB9R,sBAAY,KAChCqR,OACC,CAFH,IAIMU,EAAc,KAClBxR,aAA0BD,eAA1BC,KAGF,IAAIyR,EAAJ,KAEA,IAAKC,GAAetR,EAApB,IAAiC,CAC/B,MAAMuR,EAAMvR,OAAZ,GACAqR,EACE,sCACM/B,GACJkC,KACE,kBAAC/S,IAAD,cACE,sBAAoB2K,YAAauH,GADnC,UAIE,sBACEc,cAAe,IACb,0BAGE,sBAAYrI,YAAa+H,GAH3B,WAIE,sBAAY/H,YAAa,IAAMqH,EAAM,SAJvC,cAOE,sBAAYrH,YAAa,IAAMqH,EAAM,WAPvC,gBAUE,sBAAYrH,YAAa,IAAMqH,EAAM,UAVvC,gBAeFiB,cAAeC,GACblT,qDAMR,yBACEgK,MAAO,CACLE,SADK,WAELuI,OAAQlR,EAFH,OAGL4R,QAHK,OAILC,eACE5S,oCAEIA,sCAEA,YAERyJ,iBAAiB,EACjBxD,QAASkM,GAET,uBACEU,SAAU,CAACd,EAAD,IAA0BD,EAAaC,EAAGC,IAEpD,yBACExI,MAAO,CACLsJ,OAAQ3M,EAAW,OADd,OAEL4M,SAFK,OAGLpJ,MAAO5I,EAHF,MAILkR,OAAQlR,EAAQkR,SAGlB,yBACEe,WAAW,EACXxJ,MAAO,CACLyJ,UADK,OAELtJ,MAFK,OAGLsI,OAHK,OAILU,QAAS,SAEXO,IAAKnS,EAAQoS,QACbb,IAAKA,OAnEjBF,QA4EAA,EACE,sCACM/B,GACJkC,KACE/S,kBAACA,IAADA,cACE,sBAAoB2K,YAAauH,GADnClS,UAIG6S,GACC,sBAAoBlI,YAAa+H,GALrC1S,aAYF,yBAAKiK,iBAAiB,GACpBjK,0BACEA,4BADFA,gBAEE,sBAAQ2K,YAAayH,GAFvBpS,UAGEA,2BAHFA,mBAIE,0BAAM4T,SAAU/B,E,wBACd,sBAAc7H,MAAO,CAAEG,MAAO,QAC5B,sBACEhL,MAAO2S,EACPjP,SAAUmB,GAAK6P,EAAY7P,SAAD,OAC1BqJ,YAAY,gBAGhBrN,uBARF,MASE,sBAAQ8T,SAAUhC,eAA0BiC,IAAMjC,IAbtD9R,UAjBN4S,KAyCF,OACE,uCACE5I,MAAO,CACLgK,QAASrC,mCAAsD,SAE7D7J,GACJmC,iBAAiB,IANrB,IAaWgK,GAA4B5O,YAAH,GAAGA,CAAH,aAChB7E,GAASA,oBADO,KAgBzBA,GAASA,oBAhBf,M,SChNS0T,GAAe3S,GAC7B,OAAOD,OAAP,UAAkCC,OAGpC,SAAgB4S,GAAa3T,GAqB3B,OApBAuL,GAAW,CACTI,SADS,QAETC,OAAQvN,GACN,sBACE6L,QAAS,CACP3D,MAAO,CACLsF,IADK,iBAELC,aAAc,UAGlBlB,SAAUtI,GAAajE,EAAQ,SAC/B4H,QAAS,KACPxB,0BACA/D,eAGDV,EAbH,YAiBJ,KAGF,MAOM4T,GAAc,CAACvV,EAAD,KAClB,MAAMwV,EAAQ,CAAEnR,KAAF,cAAsBwB,SAAU,CAAC,CAAES,KAAM,MACvDhE,sBAGF,SAASmT,GAAiBzV,GAA1B,QnDgIyB,EAACA,EAAD,IAChB,YAAqB,CAC1B0V,KAD0B,MAE1BxR,GAAI,CACFyR,OAAQzT,YADN,IAEFgP,MAAOhP,eAETiC,UmDtIkByR,CAAU5V,EAAQoE,GAAtC,UAA2CA,QAC3C,OAFF,wBAESyR,IAAW,OAAlB,GAGF,MAAMlI,GAAsC,CAC1CjL,QAAS,CACPqD,UADO,QAEPI,cAAexE,IAAK,aAClB,yBACEwJ,MAAO,CACLmJ,QADK,OAELC,eACE5S,oCAEIA,sCAEA,aAGR,yBACEwJ,MAAO,CACLyJ,UADK,OAELtJ,MAAO3J,UAFF,MAGLiS,OAAQjS,UAHH,OAIL2S,QAAS,SAEXO,IAAKlT,UAAcmT,QACnBb,KAAK,UAAAtS,EAAA,mCAAqBA,UAArB,IAAyC,SAOxD,SAAgBmU,GACdnU,GAMA,MAAM3B,EAAS4B,cACTmU,EAAUjU,iBAAhB,MAEAyG,GAAU,CACRyN,OAAQA,GAAUtT,MAChB2S,iBAA2B3S,SAEvBsT,EAJE,GAKRC,WAAY,CAAC,EAAD,IAAwBC,IAAI,MAC9BC,EAAR,EAAQA,MACR,GAAIA,GAASA,SAAb,EACE,cAAmBnQ,WAAnB,kBAAsC,CAAjC,MAAMoQ,EAAX,KACQC,EAAS,IAAf,WADoC,EAErBD,aAAf,KACA,UAHoC,sBAIlCC,0BAAgC,KAC9B,MAAMnD,EAAMmD,EAAZ,OACAd,GAAYvV,EAAZuV,KAEFc,yBAIJJ,QAKN,MAYMK,EAAU,uCAAG,yCAAAlT,EAAA,yDACZpD,EAAL,UADiB,oDAIXuW,EAAWrU,eAAwBlC,EAAzC,WACMwW,EAAqBtD,IACzB,IAAKqD,EAAL,QAAuB,OACvB,MAAMrR,EAAOL,GAAqB7E,EAAQuW,EAA1C,SACIrR,GAAQmQ,GAAZ,KACE/S,eAEE,OAEE6Q,MAAO,UAET,CAAEjP,GAAIqS,EAASrT,UAEjBqT,YAIEE,EAAmB,KAClBF,EAAL,UACAjU,eAEE,CAEEyB,MAAO,gBAET,CAAEG,GAAIqS,EAASrT,UAEjBqT,YAGIJ,EAAQhR,SAAd,MAlCiB,sDAsCbgR,SAAJ,GAtCiB,oBAuCTC,EAAOD,EAAb,IACME,EAAS,IAAf,YACAA,wBAAgC,KArDjBK,MACjB,kBADiBA,EAqDiCL,EAAhDA,SAnDIM,oBAAJ,IACEA,oBAAoC,KAClCrU,eAA4B,CAC1B4Q,IAAKwD,QAiDXL,oBACI1U,EAAJ,gBA3Ce,4CA6COA,kBAAlB,GA7CW,QA6CLuR,EA7CK,OA8CXsD,KA9CW,mDAgDXC,IAhDW,2DAAH,sDAsDhB,IAAIG,EAAJ,GA0BA,OAzBIjV,EAAJ,WACEiV,EAAYnB,UACL3U,GADK2U,qBAAZmB,KAMFnS,oBAAU,KACR9C,YAAkBA,WAAlBA,IACC,CAACkV,eAAD,GAA4BlV,EAF/B8C,WAIA+D,GACE,CACEzC,UADF,QAEEI,cAAe6L,GACb,oCACEwB,kBAAmB,IAAMuC,WAAmBA,kBAC5CzC,UAAW3R,EAAM2R,WAFnB,KAOJ,CAAC3R,EAXH6G,YAeE,sBACEsO,OAAQ,UACRvS,IAAKwR,EACL/R,SAAUsS,EACVS,UAAU,IAKhBjB,gBCpNA,SAAgBkB,GAAUrV,GA8CxB,OA7CAoG,GAAUpG,EAAVoG,QACAQ,GAAU,CACR0O,WAAY,CAAC,EAAD,IAAwB3Q,IAC9BA,GAAQ4O,IAAZ,GACEgC,GAASlX,EAATkX,GAEAD,MAGJhB,WAAY,CAAC,EAAD,IAAwBC,IAClC,MAAM5P,EAAO4P,UAAb,cACI5P,GAAQ4O,IAAZ,GACEgC,GAASlX,EAATkX,GAEAjB,MAGJkB,SAAUA,GAAYzU,KAtBIA,IACrBA,iBAAP,kBAAyCA,EAAP,IAuBvB0U,KAAgCD,EAAvC,KAIJ3O,GAAiD,CAC/CzC,UAD+C,OAE/CI,cAAexE,GACb,sBACE+I,SAAO,EACPO,UAAU,SACVW,IACEzK,8BACE,uBAAG4J,OAAO,SAASsM,KAAM1V,UAAcuR,KACpCvR,UAFLR,OAOD6J,GACC,uCAAOrJ,EAAMsH,YAAYoO,KAAM1V,UAAcuR,MAC3C,0BAAM3O,IAAKyG,GAAarJ,EAb9B,cAmBJ,KAGF,SAAgB2V,GAAY3V,GAC1B,OAAOuL,GAAW,CAChBI,SADgB,OAEhB4C,UAAW,KACT,CACE,MAAMlQ,EAASmO,cACT5B,EAAWgL,GAAjB,GACA,OACE,sBACE9K,SAAU,QACV0H,cAAe1J,GACb,0BACE,sBAAW+M,QAAS,IAAM/M,GAAQ,MAGtC2J,cAAe,CAACC,EAAQxJ,IACtB,oCACEgB,QAAS,CACP3D,MAAO,CACLsF,IADK,gBAELC,aAAc,YAEhBhB,SAAUD,GAAa,WAErB6H,GACJ9H,SAAUA,GAAY1B,IAErBlJ,EAXH,gBAqBd,MAAMgM,GAAwD,CAC5DjL,QAAS,CACPqD,UADO,OAEPI,cAAexE,GAAS,uBAAG0V,KAAM1V,UAAcuR,KAAMvR,EAA7B,YAI5BqV,gBAEA,MAMaO,GAAgBvX,IAAD,QACX,YAAqB,CAAEmE,MAAOC,GAAgB,SAAXA,SAA5C,EADoB,oBAE1B,OAAOpB,QAAP,IAGIyU,GAAczX,IAClBsC,kBAA+B,CAAE6B,MAAOC,GAAgB,SAAXA,UAGzC8S,GAAW,CAAClX,EAAD,KACXuX,GAAJ,IACEE,MAFa,MAKPzV,EAAR,EAAQA,UACF0V,EAAc1V,GAAauN,gBAAjC,GACMoI,EAAO,CACXtT,KADW,aAGXwB,SAAU6R,EAAc,CAAC,CAAEpR,KAAM4M,IAAS,IAG5C,EACE5Q,sBAEAA,kBAAmC,CAAE8J,OAAO,IAC5C9J,eAA4B,CAAEsV,KAAM,UAIxC,SAASC,GAAUlW,GACjB,MAAM3B,EAAS4B,cACPI,EAAR,EAAQA,UACA8V,EAAkBxW,KAAlBwW,cACRrT,oBAAU,IACDqT,EAAP,GADFrT,IAGA,MAAMsT,EAAiBjW,iBAAvB,MACAwC,GAAkByT,EAAgB,KAChCpW,cAEF,IAAIqW,EAAJ,KACA,KAAe,SACO,YAAqB,CACvC9T,GADuC,EAEvCC,MAAOC,GAAgB,SAAXA,SAFR,EADO,oBAKb4T,EAAWC,GAAaA,EAAxBD,GAjBJ,QAmBwBpX,mBAAtB,IAnBF,mBAmBQ,EAnBR,KAmBQ,EAnBR,KAoBE6D,oBAAU,KACJuT,GAAJ,kBAAuBA,EAAP,KACdE,EAAOF,EAAPE,MAED,CAJHzT,IAKA,MAAM0T,EAAmBpW,sBAAY,KAC/BmR,SAAJ,GA9DsB,EAAClT,EAAD,KACpBA,EAAJ,WACEkX,GAASlX,EAATkX,IA6DEkB,CAAWpY,EAAXoY,GACAzW,aAEAqW,qBACOA,EAAP,KACAA,aAHK,IAKLP,MACA9V,cAED,CAZH,IAcM0W,EAAetW,sBAAY,KAC/B0V,MACA9V,aACC,CAHH,IAvCF,EA4CqBoG,KAAb,EA5CR,oBA8CE,OACE,0BAAMxD,IAAKwT,EAAgBhD,SAAUoD,GACnC,yBACEhN,MAAO,CACLmN,QADK,EAELhE,QAFK,OAGLiE,SAHK,IAILC,cAAe,QAGjB,0BACE,sBACElY,MAAO4S,EACPlP,SAAWmB,GACT+S,EAAO/S,gBAAD,OAERqJ,YAAavG,EAAS,CACpBuF,IADoB,4BAEpBC,aAAc,iCAEhBgL,WAAS,KAGb,sBACEC,SAAO,EACPzD,SAAyB,IAAf/B,SACVpH,YAAaqM,GAEZlQ,EAAS,CACRuF,IADQ,yBAERC,aAAc,UAGlB,sBACEiL,SAAO,EACPzD,UACGsC,GAAavX,GAKhB8L,YAAauM,GAEZpQ,EAAS,CACRuF,IADQ,2BAERC,aAAc,cC7OnB,MCVMkL,GAAa,CAAC3Y,EAAD,KACxB,MAAMuM,EDSuB,EAACvM,EAAD,WACrBgC,EAAR,EAAQA,UACR,MACE,SAH2B,QAKb,YAAqB,CACnCkC,GADmC,EAEnCC,MAAOC,GAAKA,SAAWC,IAEzB,QAT6B,qBCTZuU,CAAgB5Y,EAAjC,GACAsC,kBAA+B,CAC7B6B,MAAOC,GAAKA,SADiB,EAE7BgI,OAAO,IAETlK,yBAAkC,KAKhC,GAJAI,eAA4B,CAC1B+B,KAAMkI,EAAW,YAAcsM,MAGjC,EAAe,CACb,MAAMC,EAAO,QAEXjT,SAAU,IAEZvD,uBClBO6D,GAAgB,CAAC,EAAD,eAMrB,EAAN,EAAM,WAAN,EAAM,WACN,GADA,EAA8BzD,QAC1BA,OAAJ,EACE,OAAO,+CAEL,GAAoBqW,GAFtB,I,SCIYC,GAAShZ,SACfgC,EAAR,EAAQA,UACFiX,EAAQjX,EAAYA,EAAH,WAAvB,EAFuBhC,EAGLiZ,EAAQ/W,aAAH,GAAvB,GAAM,EAHiBlC,oBAKvB,IAAIkZ,GAAJ,EACIC,GAAJ,EACA,IACED,EAAsB3J,eAAtB2J,GACAC,EAAuB5J,gBAAvB4J,IAGF,IAAIC,GAAJ,EAEA,IACEA,KAAiBC,sBAEnB,IAAIC,OAAJ,EAMA,OAJI5W,GAAWD,GAAf,KACE6W,EAAc5W,EAAd4W,MAGK,6FAULH,wB,mBCjCSN,GAAN,YACMU,GAAN,iBACMC,GAAN,eACMC,GAAa,CAAC,GAAD,GAAnB,IAQDC,GAAKlT,IAAH,iBAkBFmT,GAAKnT,IAAH,iBAiBFoT,GAAKpT,IAAH,iBAEFqT,GAAwC,CAC5C9T,UAD4C,GAE5CI,cAAexE,IACb,OAAQA,UAAR,MACE,QACE,OAAOwE,GAAcxE,EAAOA,UAAR,KAApB,IACF,QACE,OAAOwE,GAAcxE,EAAOA,UAAR,KAApB,IACF,QACE,OAAOwE,GAAcxE,EAAOkX,GAA5B,OAKFlL,GAAwB,CAC5BjL,QAASmX,IAGX,SAAgBC,GAAWnY,GAqJzB,OApJA4G,GAAU,CACRwR,cAAe,CAAC,EAAD,IAA2B,EAAE7U,EAAF,MACxC,GAAIA,SAAJ,GAAkC,SACfhD,aAAjB,GAAM,EAD0B,oBAG9B+C,IACC,CAACuU,GAAmBD,IAAqBS,SACxC/U,EAHJ,OAME3C,eAA4B,CAAE+B,KAAM,aAAe,CAAEH,GAAIY,IAG7D,OAAOiV,EAAc,CAAC7U,EAAtB,OAIJsD,OAEAJ,GAAa,CACXyF,QADW,QAEXrJ,QAAS,CAACW,EAAGnF,KAAJ,QAC0BgZ,GAAjC,GAAM,EADC,EACD,YAAetW,EADd,EACcA,QACrB,GAAI4W,IAAJ,GACE,SAEF,IAAIW,EAAWlV,GAAY/E,EAAQ0C,EAAnC,GAEA,IACGuX,IACA,CAACT,GAAmBD,IAAqBS,SACxCC,EAHJ,MAME,SAGF,GADA9U,mBJ3FyBnF,KAAD,MACpBgC,EAAR,EAAQA,UAER,KAAe,SACEE,aAAsBF,EAArC,OAAM,EADO,oBAEb,WAAOqX,qBAET,UIqFSD,CAAL,GAOO,CACL,MAAMc,EzD5DgBla,KAC5B,GAAIA,EAAJ,UAAsB,SACHkC,WAAoBlC,EAArC,WAAM,EADc,oBAEpB,GAAI8E,EAAJ,OAAiB,SACE5C,aAAjB,GACA,OAFe,qBAKnB,ayDoDqBiY,CAAf,GACA,MACE,SAEF,MAAMrB,EAAO/T,GAAY/E,EAAQka,EAAjC,GACME,EAAarV,GAAY/E,EAAQka,EAAvC,GAEIE,GAAcA,qBAAlB,GAEE9X,kBAA+B,CAC7B6B,MAAOC,GAAKA,SAAW0U,EADM,KAE7B1M,OAAO,IAITuM,GAAW3Y,EAAQ8Y,EAAnBH,WAtBFzW,yBAAkC,KAChCI,kBAA+B,CAC7B+B,KAD6B,GAE7BwB,SAAU,CAAC,CAAES,KAAM,SAuBzB,YAGJ8B,GAAa,CACXyF,QADW,MAEXrJ,QAAS,CAACW,EAAGnF,KAAJ,QAC0BgZ,GAAjC,GAAM,EADC,EACD,YAAetW,EADd,EACcA,QACrB,IAAKA,GAAW4W,IAAhB,GACE,SAGF,IAAIW,EAAWlV,GAAY/E,EAAQ0C,EAAnC,GACA,IACGuX,IACA,CAACT,GAAmBD,IAAqBS,SACxCC,EAHJ,MAME,SAGF,GAAIA,kBAAJ,EAAkC,CAChC9U,mBACA,MAAMkV,GAAQ,OAAAJ,QAAQ,IAARA,OAAA,EAAAA,EAAA,qBAAd,EACA,GAAIA,qBAAJ,GAAsD,CAEpD,MAAMK,EAAYL,WAAlB,GACMM,EAAclY,eAElBiY,WAAmBA,kBAFrB,IAIAC,EAAYA,SAAZA,KACAjY,gBAA6B,CAC3BkY,GAAID,SAINjY,gBAA6B,CAAE+B,KAAM4V,EAAR,KAAuBpU,SAAU,KAEhE,SAEF,YAGJuC,GAAa,CACXyF,QADW,YAEXrJ,QAAS,CAACW,EAAGnF,KAAJ,QAC0BgZ,GAAjC,GAAM,EADC,EACD,YAAetW,EADd,EACcA,QACrB,IAAKA,GAAW4W,IAAhB,GACE,SAGF,IAAIW,EAAWlV,GAAY/E,EAAQ0C,EAAnC,GACA,IACGuX,IACA,CAACT,GAAmBD,IAAqBS,SACxCC,EAHJ,MAME,SAGF,GAAI9U,EAAJ,SAAgB,CACd,IAAI8U,EAAWlV,GAAY/E,EAAQ0C,EAAnC,GAEA,UAAIuX,QAAJ,IAAIA,OAAJ,EAAIA,gBAAwBQ,GAASA,SAArC,IACEnY,qBACK,CACL,MAAMqQ,EAAU,CACdzO,GAAI7B,mBAGN,IAAI,OAAAK,QAAO,IAAPA,OAAA,EAAAA,EAAA,iBACFJ,eAA4B,CAAE+B,KAAM,aAApC/B,GAEAA,qBAIJ,OADA6C,oBACA,EAEF,YAGJ,KAGF2U,gBCrMA,SAAgBY,GAAY/Y,GAI1B,OAAOuL,IA/ByB,EA+BIvL,EAAD,KA/BJ,EA+BiBA,EAAhD,SA/B+B,CAI/B2L,SADa,QAEb4C,UAAW,KACT,MAAMlQ,EAAS4B,cACf,OACE,sBACEiK,QAAS,CACP3D,MAAO,CACLsF,IAAK,YAAF,OADE,GAELC,aAAcpJ,IAGlBkI,SAAUtI,GAAajE,EAAQqE,GAC/BuD,QAAS,KACP+Q,GAAW3Y,EAAX2Y,GACAtW,eAGDwD,GAdL,OAP6B,IAAC,EAAD,E,SCNjB8U,GAAchZ,GAS5B,OARAyG,GAAa,CACXyF,QADW,MAEX+M,SAFW,MAGXpW,QAASW,IACPA,oBACA,KAGJ,K,OCXK,MAAM0V,GAAcrU,IAAH,iBAGpB7E,GACAA,wG,SCEYmZ,KACd,MAAM9a,EAAS4B,cACPmL,EAAaE,KAAbF,SACR,GAAIA,SAAJ,EAAyB,CACvB,MAAMgO,EAAkBC,IAAQjO,EAAhC,YACA,OACE5L,kBAACA,IAADA,cACGd,OAAA,eAAoC,EAAEgE,EAAF,OACnC,kBAAClD,IAAD,UAAgBqM,IAAG,UAAKnJ,GAAL,OAAY4W,IAC5BF,EAAA,IAAoB,CAAC5N,EAAS+N,KAC7B,GAAI/N,EAAJ,UACE,OAAO,kBAACA,EAAD,WAAmBK,IAAG,UAAKnJ,GAAL,OAAY4W,GAAZ,OAAgBC,KAE/C,MAAMC,EAAgBhO,EAAtB,OACA,OACE,kBAAChM,IAAD,UAAgBqM,IAAG,UAAKnJ,GAAL,OAAY4W,GAAZ,OAAgBC,IACP,oBAAlBC,EACJA,EADH,GAFL,KAQFha,qBAjBR,SAuBF,Y,aCtBWia,GAAiB5U,YAAH,GAAGA,CAAH,aAQR,MAuDnB,SAAgB6U,GAAY1Z,GAC1B,MAAM3B,EAAS4B,cADWD,EAEUiL,KAFVjL,mBAEpB,EAFoBA,KAEpB,EAFoBA,OAGEf,mBAAS,OAArC,MAH0Be,mBAGpB,EAHoBA,KAGpB,EAHoBA,OAIMf,oBAAhC,GAJ0Be,mBAIpB,EAJoBA,KAIpB,EAJoBA,KAKpB2Z,EAAaxZ,iBAAnB,MACAwC,GAAkBgX,EAAY,KAC5BC,QAGF,MAAMC,EAxCR,SAAwBxb,GAAxB,QAC0BY,mBAAxB,MADF,mBACQ,EADR,KACQ,EADR,KA2BE,OAzBA6D,oBAAU,KACR,IAAI,QACiB,WAAoB,CACrCkR,OAAQzT,YAD6B,IAErCgP,MAAOhP,gBAFH,EADJ,oBAKF,GAAIuZ,GAAYpC,WAAhB,GAAuC,CACfhX,gBAAtB,GACAqZ,6BAA4CvW,IAC1C,GAAI9C,iBAA+B8C,EAAnC,QAAiE,CAC/D,MAAMD,EAAO7C,kBAEX8C,EAFF,QAIML,EAAOzC,eAAb,GACAsZ,EAAQ,QAAQ7W,cAEhB6W,WAIN,MAAOC,GACPD,UAED,CAxBHlX,IAyBA,EAaoBoX,CAApB,GAEMC,EAAoB/Z,sBACvB4C,IACCA,mBACAA,qBACKoX,GAAL,GACEzZ,aAA0BkZ,EAA1BlZ,MAEFiZ,MACAlZ,cAEF,CAAC0Z,EAVH,IAqCA,OAxBAtX,oBAAU,KACR,IAAI,OAAA+W,QAAW,IAAXA,OAAA,EAAAA,EAAA,QAAJ,EACE,IAAI,QACiB,WAAoB,CACrC7F,OAAQzT,YAD6B,IAErCgP,MAAOhP,gBAFH,EADJ,oBAKF,GAAIuZ,GAAYpC,WAAhB,GAAuC,CACrC,MAAMqC,EAAgBrZ,gBAAtB,GAEM6H,EADgB7H,gBAA8BmZ,EAApD,MACA,wBACMQ,EAAM9R,MAAWG,OAAXH,YAAgCA,SAAhCA,EAAkD,KACxD+R,EACJP,+BACArR,OADAqR,YADF,GAIAQ,EAAU,CAACF,EAAXE,KAEF,MAAON,MAIV,CAtBHnX,IAyBG+W,GAAD,IACAA,eADA,IAEAnC,WAAYmC,EAAZnC,eACAnX,aAAsBsZ,EAJxB,OAME,EAKA,2BACE,2BACG,EAAGjX,SACF,yBACEA,IAAKA,EACL4G,MAAO,CAAEE,SAAF,WAAwB2Q,IAAKG,EAA7B,GAAwCF,KAAME,EAAO,KAE5D,sBAAgBvU,QAASkU,MAI9BC,GACC,uBACE9Q,UAAU,aACVyH,UAAW,CACT,CACErN,KADF,SAEEsN,QAAS,CACPC,OAAQ,CAAC,GAAI,QAKlB,EAAC,0BAAyB1H,gBACzB,yBACE3G,IAAKA,EACL4G,MAAK,2BAAE,GAAF,IAAcsG,OAAQ,K,iBACXxG,EAChBa,YAAa3G,IACNA,EAAL,uBACEA,mBACAoW,MACAlZ,aACArC,aACEsC,aAA0BtC,YAD5BA,UAKJ,yBAAKuE,IAAK+W,GACR,kBAAC3O,EAAD,UAA0BrM,MAAOyM,GAC/B5L,0BACEA,0BACEA,qBAHN,QAMGQ,EArBP,WAwBE,yBAAK4C,IAAK2G,EAAW3G,IAAK4G,MAAOD,EAAWC,WApDpD,K,SCzHUiR,WACNrP,EAAaE,KAAbF,SACF/M,EAAS4B,cAEf,GADA,EAAQI,UACO,CACb,MAAMqa,EAAmBtP,EAAA,OAAgBI,IAAO,QAC9B,YAA0B,CACxChJ,MAAOC,IACL,GAAI+I,aAAJ,kBAAgC/I,EAAPC,MACvB,GAAIyB,GAAY1B,EAAmB+I,EAAnC,WACE,cAEG,IACJA,EAAD,YACC/F,aADD,IADK,kBAGEhD,EAAPC,KAEA,SAEF,YAbE,EADwC,oBAiB9C,OAAOrB,QAAP,KAEF,GAAIqZ,SAAJ,EAAiC,CAC/B,MAAMtB,EAAkBC,IAAQqB,EAAhC,YACA,OACElb,0BACE,0BACGd,OAAA,eACC,EAAEgE,EAAF,OACE,kBAAClD,IAAD,UAAgBqM,IAAG,UAAKnJ,GAAL,OAAY4W,IAC5BF,EAAA,IAAoB,CAAC5N,EAAS+N,KAC7B,GAAI/N,EAAJ,UACE,OAAO,kBAACA,EAAD,WAAmBK,IAAG,UAAKnJ,GAAL,OAAY4W,GAAZ,OAAgBC,KAE/C,MAAMC,EAAgBhO,EAAtB,OACA,OACE,kBAAChM,IAAD,UAAgBqM,IAAG,UAAKnJ,GAAL,OAAY4W,GAAZ,OAAgBC,IACP,oBAAlBC,EACJA,EADH,GAFL,KAQFha,qBAnBZ,WA4BJ,Y,SC5Dcmb,GACdta,EACAmJ,GACAzC,GACE,CACE9C,WAAYjE,GAERR,wCACEgK,MAAOxJ,iCAAwCqN,GAC3CrN,EAFNR,YAIGQ,EALL,WAUJ,CAbF+G,I,SCJ4B6T,EAA+BlU,GAC3D,MAAMC,EAAQhD,KACdb,oBAAU,KACR6D,sBACO,IAAMA,mBAAb,IAFF7D,GDkBA+X,CACE,CACEC,UAAW,QACT,MAAM5V,EAAN,GAIA,OAHI7E,GAAaqX,UAAerX,SAAhC,OACE6E,kCAAY,GAAZA,IAA4B6V,oBAAoB,KAElD,IAGJ,CAVFF,IEZsBla,IAAjB,SACPA,aAAsB,WAMtB,MAAMqa,GAAmBxb,uBAAzB,GA+DA,SAAgByb,GAAWjb,WA3D3B,WACE,MAAM3B,EAAS4B,cACPI,EAAR,EAAQA,UAEF6a,EAAkBxa,cAAxB,GACMqV,EAAc1V,GAAauN,gBAAjC,GACMR,EAAU/M,GAAhB,KAA6BE,gBACvB4a,EAAcjY,GAAqB7E,EAAzC,GACMgW,EAAS9T,aAAf,GACM6a,EAAazX,KAAnB,SACQ/C,EAAmBjB,KAAnBiB,eACR+Z,GAAqB,OAAC/Z,QAAD,IAACA,OAAD,EAACA,EAAD,QAA0B,CAC7Cya,gBAAiB,YAZrB,QAwBgCpc,oBAA9B,GAxBF,mBAwBQ,EAxBR,KAwBQ,EAxBR,KA0BE6D,oBAAU,KACR,EACEwY,MACS1X,EAAJ,SACD,OAAChD,QAAD,IAACA,OAAD,EAACA,EAAD,cAAJ,GACE0a,MAGF,IACMvF,GAAJ,EACEuF,MACUvF,GAAL,GACLuF,QAIL,CAACJ,EAAiBnF,EAAa3I,EAhBlCtK,IAkBA,MAAMc,EAAM,CACV2X,WAGF,MAAO,OAAOD,cAYcza,GAAtB,EADmBb,EACnB,IAAOsb,EADYtb,EACZsb,WADYtb,EAEWiL,KAFXjL,mBAEnB,EAFmBA,KAEnB,EAFmBA,KAGzB,OACE,kBAACgb,GAAD,UAA2Brc,MAAOiF,GAChC,kBAACoH,EAAD,UAA0BrM,MAAOyM,GAC/B,sBACEoQ,gBAAiBD,GAAWD,EAAWC,GACvCA,QAAS3X,EAAI2X,SAEb/b,qBALJ,OAOGQ,EATP,WAeF,MAAayb,GACXzb,IAD0B,MAOpB,EAAN,EAAM,WAAN,EAAM,UAAN,EAAM,gBAAyC+E,EAPrB,YAO1B,EAP0B,0CAQpB1G,EAAS4B,cACPI,EAAR,EAAQA,UATkB,EAUYpB,oBAAtC,GAV0B,mBAUpB,EAVoB,KAUpB,EAVoB,KAWpBkc,EAAcjY,GAAqB7E,EAAzC,GAEAyE,oBAAU,KACR,MAAM4Y,EAAcrb,EAChBA,eAAyBA,SADA,QAA7B,EAGAsb,MACC,CALH7Y,IAOA,MAAM8Y,EAAUzb,iBAAhB,MApB0B,EAqBNlB,mBAAyB,CAC3C4c,sBAAuB,KAAM,CAC3BxB,KAD4B,IAE5BC,MAF4B,IAG5BwB,OAH4B,EAI5BvL,MAJ4B,EAK5B5G,MAL4B,EAM5BsI,OAAQ,MA5Bc,mBAqBpB,EArBoB,KAqBpB,EArBoB,KAwE1B,OAxCAtP,GAAkBiZ,EAASpY,IACzB,KAAiB,CACf,MAAMuY,EAAUrb,gBAAhB,GACA,GAAI8C,UAAYuY,WAAiBvY,EAAjC,QACE,OAGJgY,QAGF1Y,oBAAU,KACR,KAAa,CAEX,GADevC,aAAf,IACA,EACE,IACE,MAAMwb,EAAUrb,gBAAhB,GACAsb,EAAM,CACJH,sBAAuB,IAAME,4BAE/B,MAAO9B,GACPgC,oBAGF,IACE,MAAMC,EAAexT,OAArB,eACA,GAAIwT,GAAgBA,aAApB,EAAiD,CAC/C,MAAMC,EAAWD,aAAjB,GACIC,IAAJ,IAAgBC,GACdJ,EAAM,CACJH,sBAAuB,IAAMM,6BAInC,MAAOlC,GACPgC,kBAIL,CAACV,EAASa,EAAa/b,EA5B1ByC,IA8BKyY,GAAL,EAKE,uBACExK,UAAW,CACT,CACErN,KADF,SAEEsN,QAAS,CACPC,OAAQ,CAAC,EAAG,OAIlB3H,UAAU,UACV+S,iBAAkBC,GAEjB,EAAC,0BAAyB/S,gBACzB,yBACE3G,IAAKA,EACL4G,MAAK,2BAAE,GAAF,IAAcsG,OAAQ,K,iBACXxG,GAEhB9J,uCAAKoD,IAAKgZ,GAAVpc,GALF,GAQE,yBAAKoD,IAAK2G,EAAW3G,IAAK4G,MAAOD,EAAWC,UAzBlD,M,SChKY+S,KAed,OAdAxV,GAAc,CACZ9C,WAAYjE,IACV,qBAAWA,aACT,OACE,wCACEwJ,MAAO,CAAEgT,MAAOxc,eACZA,EAFN,YAIGA,EALL,aAWN,KAGF,SAAgByc,GAAiBzc,GAuC/B,OAAOuL,GAAW,CAChBI,SADgB,QAEhB4C,UArCF,WACE,OACE,sBACEiE,cAAe1J,GACb,0BACE,sBACEzL,OACE2C,UAAgB,CAAC,qBAAD,2DAOlB6V,QAAS,IAAM/M,GAAQ,MAI7B2J,cAAe,CAACC,EAAQxJ,IACtB,oCACEgB,QAAS,CACP3D,MAAO,CACLsF,IADK,kBAELC,aAAc,eAGd4G,GACJ9H,SAAU1B,IAETlJ,EAVH,eAsBV,MAAMgM,GAAwD,CAC5DhI,KAAM,CACJC,WAAYjE,GACViE,GAAWjE,EAAO,QAAS,OAAQ,CACjCwJ,MAAO,CAAEgT,MAAOxc,kBAMxB,SAAS0c,GAAc1c,GACrB,MAAM3B,EAAS4B,cACT,EAAN,EAAM,QAAW5C,EAAjB,EAAiBA,OACTgD,EAAR,EAAQA,UACA8V,EAAkBxW,KAAlBwW,cACRrT,oBAAU,IACDqT,EAAP,GADFrT,IAGA,MAAM6Z,EAAaxc,iBAAnB,MACAwC,GAAkBga,EAAY,KAC5B9G,MAEF,MAAM+G,EAAwBxc,sBAC3Boc,IACC7b,eAEE,CAAE6b,SACF,CAAEha,MAAOC,GAAK+H,WAAd,GAA8BC,OAAO,IAEvCoL,KAEF,CATF,IAYA,OACE,yBACEjT,IAAK+Z,EACLnT,MAAO,CACLmN,QADK,EAELhE,QAFK,OAGLkE,cAAe,QAGjB,yBAAKrN,MAAO,CAAEmJ,QAAS,SACrB,yBACE1M,QAAS,IAAM2W,OAAsBvP,GACrC7D,MAAO,CACLG,MADK,GAELsI,OAFK,GAGL4K,OAHK,EAILxB,gBAJK,OAKLyB,OAAQ,aAGXzf,EAAA,IAAW,CAACmf,EAAOlD,IAEhB,yBACEzN,IAAKyN,EACLrT,QAAS,IAAM2W,EAAsBJ,GACrChT,MAAO,CACLG,MADK,GAELsI,OAFK,GAGL4K,OAHK,EAILxB,gBAJK,EAKLyB,OAAQ,gBAxDxBP,gB,oUCrBA,SAASQ,GAAK/c,GACZ,OAAO,kBAAC,KAAD,eAASwc,MAAM,UAAUQ,KAAM,IAAShd,IAGjD,MAAMid,GAAe,CACnB,aAAc,MACd,eAAgB,SAChB,sBAAuB,cACvB,kBAAmB,aACnB,kBAAmB,aACnB,iBAAkB,UAClB,gBAAiB,OACjB,wBAAyB,kBACzB,0BAA2B,aAC3B,4BAA6B,6BAC7B,yBAA0B,YAC1B,2BAA4B,QAC5B,0BAA2B,uBAC3B,iCAAkC,QAClC,kCAAmC,eACnC,kCAAmC,eACnC,kCAAmC,eACnC,kCAAmC,eACnC,kCAAmC,eACnC,kCAAmC,gBA4BrC,MAAMC,GAAerY,IAAOsY,IAAV,MA8PHC,OA7Of,WAAgB,MAAD,EACane,mBAAiB,CACzC,CACEyD,KAAM,KACNwB,SAAU,CAAC,CAAES,KAAM,sCAErB,CACEjC,KAAM,YACNwB,SAAU,CACR,CACES,KACE,8QAIR,CACEjC,KAAM,YACNwB,SAAU,CACR,CACEsY,MAAO,UACP7X,KACE,usBAIR,CACEjC,KAAM,KACNwB,SAAU,CAAC,CAAES,KAAM,eAErB,CACEjC,KAAM,QACNiH,MAAO,IACPsI,OAAQ,IACRT,MAAO,OACPD,IACE,sEACFrN,SAAU,CACR,CACES,KAAM,SAIZ,CACEjC,KAAM,KACNwB,SAAU,CAAC,CAAES,KAAM,eAErB,CACEjC,KAAM,KACNwB,SAAU,CAAC,CAAES,KAAM,aAErB,CACEjC,KAAM,eACNwB,SAAU,CACR,CAAExB,KAAM,YAAawB,SAAU,CAAC,CAAES,KAAM,eACxC,CAAEjC,KAAM,YAAawB,SAAU,CAAC,CAAES,KAAM,aAG5C,CACEjC,KAAM,KACNwB,SAAU,CAAC,CAAES,KAAM,eAErB,CACEjC,KAAM,iBACNwB,SAAU,CACR,CAAExB,KAAM,YAAawB,SAAU,CAAC,CAAES,KAAM,cACxC,CAAEjC,KAAM,YAAawB,SAAU,CAAC,CAAES,KAAM,yBAjEjC,mBACNhG,EADM,KACCsJ,EADD,KAwEb,OAFAgU,QAAQoB,IAAI1e,GAGV,yBAAK6K,MAAO,CAAEmN,QAAS,QACrB,yBAAKnN,MAAO,CAAEmJ,QAAS,OAAQkE,cAAe,QAC5C,yBAAKrN,MAAO,CAAE8T,KAAM,IAClB,kBAACJ,GAAD,KACE,kBAAClc,GAAD,CACErC,MAAOA,EACP0D,SAAU1D,GAASsJ,EAAStJ,GAC5BsC,MAAO,CACLsc,UAAW,KAqBb,kBAACrP,GAAD,CAAapM,OAAQmb,KACrB,kBAACzO,GAAD,MACA,kBAACI,GAAD,MACA,kBAAC3C,GAAD,MACA,kBAACG,GAAD,MACA,kBAACE,GAAD,MACA,kBAACoB,GAAD,MACA,kBAACyG,GAAD,MACA,kBAACpG,GAAD,MACA,kBAACD,GAAD,MACA,kBAACA,GAAD,MACA,kBAACuH,GAAD,MACA,kBAAC8C,GAAD,MACA,kBAACa,GAAD,MACA,kBAACuD,GAAD,MACA,yBACE/S,MAAO,CACLgU,WAAY,KAGd,kBAAC9D,GAAD,KACE,kBAACpL,GAAD,KACE,kBAAC,GAAD,CAAMnL,KAAMsa,QAEd,kBAAClQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAMua,QAEd,kBAACnQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAMwa,QAEd,kBAACpQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAMya,QAEd,kBAACrQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAM0a,QAEd,kBAACtQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAM2a,QAEd,kBAACvQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAM4a,QAEd,kBAAChF,GAAD,CAAarW,KAAK,gBAChB,kBAAC,GAAD,CAAMS,KAAM6a,QAEd,kBAACjF,GAAD,CAAarW,KAAK,kBAChB,kBAAC,GAAD,CAAMS,KAAM8a,QAEd,kBAACtK,GAAD,KACE,kBAAC,GAAD,CAAMxQ,KAAM+a,SAGhB,kBAACjD,GAAD,KACE,kBAACnM,GAAD,KACE,kBAAC,GAAD,CAAM3L,KAAMgb,QAEd,kBAACzS,GAAD,KACE,kBAAC,GAAD,CAAMvI,KAAMib,QAEd,kBAAC/R,GAAD,KACE,kBAAC,GAAD,CAAMlJ,KAAMkb,QAEd,kBAAClS,GAAD,KACE,kBAAC,GAAD,CAAMhJ,KAAMmb,QAEd,kBAAC/Q,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAMua,QAEd,kBAACnQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAMwa,QAEd,kBAACpQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAMya,QAEd,kBAACrQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAM0a,QAEd,kBAACtQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAM2a,QAEd,kBAACvQ,GAAD,CAAgBC,QAAQ,MACtB,kBAAC,GAAD,CAAMrK,KAAM4a,QAEd,kBAACpI,GAAD,KACE,kBAAC,GAAD,CAAMxS,KAAMob,QAEd,kBAAC9B,GAAD,CACEpf,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGF,kBAAC,GAAD,CAAM8F,KAAMqb,SAGhB,kBAACje,GAAD,CACEke,YAAY,EACZjV,MAAO,CAAEuJ,SAAU,OAAQ2L,UAAW,cC7UxDC,IAAS/S,OAAO,kBAAC,GAAD,MAAS3I,SAAS2b,eAAe,W","file":"static/js/main.0f2dfe10.chunk.js","sourcesContent":["import { ChiefEditorTheme } from \"./chief-editor-theme\";\n\nexport const defaultTheme: ChiefEditorTheme = {\n  colors: {\n    primary: \"#4299E1\",\n    seconday: \"#38B2AC\",\n    gray: {\n      100: \"#F7FAFC\",\n      200: \"#EDF2F7\",\n      300: \"#E2E8F0\",\n      400: \"#CBD5E0\",\n      500: \"#A0AEC0\",\n      600: \"#718096\",\n      700: \"#4A5568\",\n      800: \"#2D3748\",\n      900: \"#1A202C\"\n    }\n  }\n};\n","import { ReactEditor } from \"slate-react\";\nimport { OnPlugin } from \"../../addon\";\n\n// Use this to save the originals of the editor functions\nlet originalEntries = {};\n/**\n * Allows for dynamically hook in and out of plugins.\n * Only overriding functions of the Editor is supported.\n * @param editor\n * @param plugins\n */\nexport function withChiefOnPlugIn(editor: ReactEditor, plugins: OnPlugin[]) {\n  // We basically take control over each function in the editor and route them\n  // to the appropriate addon that has requested overriding it.\n  // This allows for us to use hooks that can mount and unmount.\n  for (const [prop, value] of Object.entries(editor)) {\n    if (typeof value === \"function\") {\n      if (!(prop in originalEntries)) {\n        originalEntries[prop] = value;\n      }\n      editor[prop] = (...args: any[]) => {\n        let editorFn = originalEntries[prop];\n        for (const plugin of plugins) {\n          if (plugin && prop in plugin) {\n            editorFn = plugin && plugin[prop](editorFn, editor);\n          }\n        }\n        return editorFn(...args);\n      };\n    }\n  }\n\n  return editor;\n}\n","import { useMemo } from \"react\";\nimport { ReactEditor, withReact } from \"slate-react\";\nimport { createEditor as createSlateEditor } from \"slate\";\nimport { withHistory } from \"slate-history\";\nimport { OnPlugin } from \"../../addon\";\nimport { withChiefOnPlugIn } from \"./with-chief-on-plugIn\";\n\nexport const createEditor = (plugins: OnPlugin[]): ReactEditor => {\n  const editor = useMemo(() => withReact(withHistory(createSlateEditor())), []);\n  return useMemo(() => withChiefOnPlugIn(editor, plugins), [plugins]);\n};\n","import React, { useState, useRef } from \"react\";\nimport { ReactEditor, Editable } from \"slate-react\";\nimport { OnPlugin } from \"../addon\";\nimport { KeyHandler } from \"./key-handler\";\nimport { createEditor } from \"./utils/create-editor\";\nimport {\n  InjectedRenderLeaf,\n  InjectedRenderElement,\n  InjectedLabels,\n  InjectedDecorator\n} from \"./chief\";\ninterface ChiefRenderCore {\n  injectRenderLeaf: (irl: InjectedRenderLeaf) => void;\n  removeRenderLeaf: (irl: InjectedRenderLeaf) => void;\n  renderLeafs: Array<InjectedRenderLeaf>;\n  injectRenderElement: (irl: InjectedRenderElement<any>) => void;\n  removeRenderElement: (irl: InjectedRenderElement<any>) => void;\n  renderElements: InjectedRenderElement[];\n}\n\nexport function useChiefRenderCore() {\n  const [renderLeafs, setRenderLeafs] = useState<InjectedRenderLeaf[]>([]);\n  const [renderElements, setRenderElements] = useState<InjectedRenderElement[]>(\n    []\n  );\n  function injectRenderLeaf(irl: InjectedRenderLeaf) {\n    setRenderLeafs(it => [...it, irl]);\n  }\n\n  function removeRenderLeaf(irl: InjectedRenderLeaf) {\n    setRenderLeafs(it => {\n      const toSlicer = [...it];\n      toSlicer.splice(toSlicer.indexOf(irl), 1);\n      return toSlicer;\n    });\n  }\n\n  function injectRenderElement(ire: InjectedRenderElement) {\n    setRenderElements(it => [...it, ire]);\n  }\n\n  function removeRenderElement(ire: InjectedRenderElement) {\n    setRenderElements(it => {\n      const toSlicer = [...it];\n      toSlicer.splice(it.indexOf(ire), 1);\n      return toSlicer;\n    });\n  }\n\n  return {\n    renderLeafs,\n    injectRenderLeaf,\n    removeRenderLeaf,\n    renderElements,\n    injectRenderElement,\n    removeRenderElement\n  };\n}\n\nexport interface ChiefContextValue extends ChiefRenderCore {\n  editor: ReactEditor;\n  readOnly: boolean;\n  setReadOnly: (readOnly: boolean) => void;\n  id: string;\n  injectOnKeyHandler: (keyHandler: KeyHandler) => void;\n  removeOnKeyHandler: (keyHandler: KeyHandler) => void;\n  onKeyDownHandlers: KeyHandler[];\n  injectPlugin: (plugin: OnPlugin) => void;\n  removePlugin: (plugin: OnPlugin) => void;\n  OnPlugins: OnPlugin[];\n  labels: InjectedLabels;\n  injectLabels: (labels: InjectedLabels) => void;\n  decorations: InjectedDecorator[];\n  injectDecoration: (decoration: InjectedDecorator) => void;\n  removeDecoration: (decoration: InjectedDecorator) => void;\n}\nexport const ChiefContext = React.createContext<ChiefContextValue | null>(null);\nlet count = 1;\nexport function useProvideChiefContext(props: {\n  readOnly?: boolean;\n  id?: string;\n}) {\n  const [injectedPlugins, setInjectedPlugins] = useState<OnPlugin[]>([]);\n  const [injectedLabels, setInjectedLabels] = useState<InjectedLabels>({});\n  const [onKeyHandlers, setOnKeyHandlers] = useState<KeyHandler[]>([]);\n  const [decorations, setDecorations] = useState<InjectedDecorator[]>([]);\n  const editor = createEditor(injectedPlugins);\n  const [readOnly, setReadOnly] = useState(Boolean(props.readOnly));\n  const { current: id } = useRef(props.id || `chiefeditor${count++}`);\n\n  function injectPlugin(plugin: OnPlugin) {\n    setInjectedPlugins(plugins => [...plugins, plugin]);\n  }\n\n  function removePlugin(plugin: OnPlugin) {\n    setInjectedPlugins(it => {\n      const toSlicer = [...it];\n      toSlicer.splice(toSlicer.indexOf(plugin), 1);\n      return toSlicer;\n    });\n  }\n\n  function injectOnKeyHandler(keyHandler: KeyHandler) {\n    setOnKeyHandlers(it =>\n      [...it, keyHandler].sort((a, b) =>\n        a.priority === b.priority ? 0 : a.priority === \"low\" ? 1 : -1\n      )\n    );\n  }\n\n  function removeOnKeyHandler(keyHandler: KeyHandler) {\n    setOnKeyHandlers(it => {\n      const toSlicer = [...it];\n      toSlicer.splice(it.indexOf(keyHandler), 1);\n      return toSlicer;\n    });\n  }\n\n  function injectDecoration(decorator: InjectedDecorator) {\n    setDecorations(it =>\n      [...it, decorator].sort((a, b) =>\n        a.priority === b.priority ? 0 : a.priority === \"low\" ? 1 : -1\n      )\n    );\n  }\n\n  function removeDecoration(decorator: InjectedDecorator) {\n    setDecorations(it => {\n      const toSlicer = [...it];\n      toSlicer.splice(it.indexOf(decorator), 1);\n      return toSlicer;\n    });\n  }\n\n  function injectLabels(labels: InjectedLabels) {\n    setInjectedLabels(it => ({ ...it, ...labels }));\n  }\n\n  const value: ChiefContextValue = {\n    ...useChiefRenderCore(),\n    editor,\n    readOnly,\n    setReadOnly,\n    id,\n    injectOnKeyHandler,\n    removeOnKeyHandler,\n    onKeyDownHandlers: onKeyHandlers,\n    injectPlugin,\n    removePlugin,\n    OnPlugins: injectedPlugins,\n    labels: injectedLabels,\n    injectLabels,\n    decorations,\n    injectDecoration,\n    removeDecoration\n  };\n\n  return value;\n}\n","import React, {\n  ReactNode,\n  useCallback,\n  useContext,\n  useRef,\n  useState\n} from \"react\";\nimport { ReactEditor, useSlate } from \"slate-react\";\nimport { Editor, Range, Transforms, RangeRef } from \"slate\";\n\ntype Context = ReturnType<typeof useProvideContext>;\n\nconst savedSelectionContext = React.createContext<Context | undefined>(\n  undefined\n);\n\nexport function useSaveSelection() {\n  const context = useContext(savedSelectionContext);\n  if (!context) {\n    throw new Error(\"No SavedSelectionProvider.\");\n  }\n  return context;\n}\n\nexport function SavedSelectionProvider(props: { children: ReactNode }) {\n  const value = useProvideContext();\n  return (\n    <savedSelectionContext.Provider value={value}>\n      {props.children}\n    </savedSelectionContext.Provider>\n  );\n}\n\nfunction useProvideContext() {\n  const editor = useSlate();\n  const editorRef = useRef(editor);\n  editorRef.current = editor;\n\n  const [savedSelection, setSaveSelection] = useState<RangeRef | null>(null);\n  const saveSelection = useCallback((selection: Range | null) => {\n    if (selection !== null) {\n      const sRef = Editor.rangeRef(editor, selection);\n      setSaveSelection(sRef);\n      return () => {\n        if (sRef.current) {\n          setTimeout(() => {\n            ReactEditor.focus(editorRef.current);\n            Transforms.select(editorRef.current, sRef.current!);\n            setSaveSelection(null);\n            sRef.unref();\n          }, 0);\n        }\n      };\n    }\n    return () => null;\n  }, []);\n  return { saveSelection, savedSelection };\n}\n","import React, { useEffect } from \"react\";\nimport {\n  RenderLeafProps,\n  ReactEditor,\n  RenderElementProps,\n  Slate\n} from \"slate-react\";\nimport { Node, Element, NodeEntry, Range } from \"slate\";\nimport merge from \"lodash/merge\";\nimport { ChiefEditorTheme } from \"../chief-editor-theme\";\nimport { ThemeProvider } from \"styled-components\";\nimport { defaultTheme } from \"../defaultTheme\";\nimport { useProvideChiefContext, ChiefContext } from \"./chief-context\";\nimport { useErrorBoundary } from \"use-error-boundary\";\nimport { SavedSelectionProvider } from \"./utils/saved-selection\";\n\nexport function isChiefElement(element: unknown): element is ChiefElement {\n  return (element as ChiefElement).type !== undefined;\n}\n\nexport type ChiefElement = Element & {\n  type: string;\n};\n\nexport type ChiefRenderElementProps<\n  T extends ChiefElement = ChiefElement\n> = RenderElementProps & {\n  element: T;\n};\n\nexport type ElementTypeMatch = RegExp | string | readonly string[];\n\nexport type InjectedRenderLeaf = {\n  renderLeaf: (\n    props: RenderLeafProps,\n    editor?: ReactEditor\n  ) => JSX.Element | undefined;\n};\n\nexport type InjectedRenderElement<T extends ChiefElement = ChiefElement> = {\n  typeMatch?: ElementTypeMatch;\n  Component?: React.FunctionComponent<ChiefRenderElementProps>;\n  renderElement?:\n    | JSX.Element\n    | ((\n        props: ChiefRenderElementProps<T>,\n        editor?: ReactEditor\n      ) => JSX.Element | undefined);\n};\n\nexport type InjectedLabels = { [key: string]: string | undefined };\nexport type Label = { key: string; defaultLabel: string };\n\nexport type InjectedDecorator = {\n  decorator: (\n    entry: NodeEntry<Node>,\n    editor: ReactEditor\n  ) => Range[] | undefined;\n  priority?: \"high\" | \"low\";\n};\n\nexport const Chief = React.memo(function(props: {\n  value: Node[];\n  onChange: (value: Node[]) => void;\n  children: React.ReactNode;\n  readOnly?: boolean;\n  id?: string;\n  theme?: ChiefEditorTheme & { [key: string]: any };\n}) {\n  const { children, onChange, value, readOnly, id, theme } = props;\n  const _theme = merge({}, defaultTheme, theme);\n  const chiefValue = useProvideChiefContext({ readOnly, id });\n  const { ErrorBoundary, didCatch, error } = useErrorBoundary();\n  return (\n    <ErrorBoundary>\n      <Slate editor={chiefValue.editor} value={value} onChange={onChange}>\n        <ChiefContext.Provider value={chiefValue}>\n          <SavedSelectionProvider>\n            <ThemeProvider theme={_theme}>\n              <React.Fragment>{children}</React.Fragment>\n            </ThemeProvider>\n          </SavedSelectionProvider>\n        </ChiefContext.Provider>\n      </Slate>\n    </ErrorBoundary>\n  );\n});\n","import { useEffect, useCallback, useState, useRef } from \"react\";\nimport { Editor, Point, Node, Transforms, Location } from \"slate\";\nimport { ReactEditor } from \"slate-react\";\nimport { Range } from \"slate\";\n\nexport const isInside = (rect: ClientRect, x: number, y: number) => {\n  return (\n    x >= rect.left &&\n    x <= rect.left + rect.width &&\n    y >= rect.top &&\n    y <= rect.top + rect.height\n  );\n};\n\nexport const useGlobalHover = (element: HTMLElement | null) => {\n  const [over, setOver] = useState(false);\n\n  const handleMove = useCallback(\n    (event: MouseEvent) => {\n      if (element) {\n        const bounds = element.getBoundingClientRect();\n        setOver(isInside(bounds, event.clientX, event.clientY));\n      }\n    },\n    [element]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleMove);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMove);\n    };\n  }, [element]);\n  return over;\n};\n\nexport function useHover<T extends HTMLElement>(): [\n  React.RefObject<T>,\n  boolean\n] {\n  const [value, setValue] = useState(false);\n\n  const ref = useRef<T>(null);\n\n  const handleMouseOver = () => setValue(true);\n  const handleMouseOut = () => setValue(false);\n\n  useEffect(\n    () => {\n      const node = ref.current;\n      if (node) {\n        node.addEventListener(\"mouseover\", handleMouseOver);\n        node.addEventListener(\"mouseout\", handleMouseOut);\n\n        return () => {\n          node.removeEventListener(\"mouseover\", handleMouseOver);\n          node.removeEventListener(\"mouseout\", handleMouseOut);\n        };\n      }\n      return undefined;\n    },\n    [ref.current] // Recall only if ref changes\n  );\n\n  return [ref, value];\n}\n\nexport const getActiveNode = (editor: ReactEditor) => {\n  if (editor.selection) {\n    const [, path] = Editor.node(editor, editor.selection);\n    if (path.length) {\n      const [parent] = Editor.parent(editor, path);\n      return parent;\n    }\n  }\n  return null;\n};\n\nexport const getActiveNodeType = (editor: ReactEditor) => {\n  const block = getActiveNode(editor);\n  return block ? block.type : null;\n};\n\nexport const clone = (value: any) => {\n  return JSON.parse(JSON.stringify(value));\n};\n\ninterface State {\n  node: Node | null;\n  point: Point | null;\n  selection: Range | null;\n}\n\nexport const useLastFocused = (editor: ReactEditor) => {\n  const [state, setState] = useState<State>({\n    node: null,\n    point: null,\n    selection: null\n  });\n  const { selection } = editor;\n  const current = getActiveNodeType(editor);\n\n  useEffect(() => {\n    if (!ReactEditor.isFocused(editor)) {\n      return;\n    }\n    if (!selection) {\n      return;\n    }\n    if (current) {\n      const point = selection.focus;\n      const [node] = Editor.parent(editor, point);\n      if (Node.isNode(node)) {\n        setState({ node, point, selection: clone(selection) });\n      }\n    }\n  }, [current, selection]);\n\n  return state;\n};\n\nexport const isBlockEmpty = (editor: Editor, location?: Location) => {\n  let selection: Location | null = editor.selection;\n  if (location) {\n    selection = location;\n  }\n  if (selection) {\n    const [node] = Editor.node(editor, selection);\n    return Node.string(node).length === 0;\n  }\n\n  return false;\n};\n\nexport const toggleBlock = (editor: Editor, type: string) => {\n  const isActive = isNodeActive(editor, type);\n\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : type\n  });\n};\n\nexport const isNodeActive = (editor: Editor, type: string) => {\n  const { selection } = editor;\n  if (!selection) {\n    return false;\n  }\n  const [match] = Editor.nodes(editor, {\n    at: selection,\n    match: n => n.type === type\n  });\n  return !!match;\n};\n\nexport function useOnClickOutside(\n  ref: React.MutableRefObject<any>,\n  handler: (event: MouseEvent | TouchEvent) => void\n) {\n  useEffect(\n    () => {\n      const listener = (event: MouseEvent | TouchEvent) => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}\n\nexport function getNodeFromSelection(editor: Editor, selection: Range | null) {\n  if (selection) {\n    const [, path] = Editor.node(editor, selection);\n    if (path.length) {\n      const [parent] = Editor.parent(editor, path);\n      return parent;\n    }\n  }\n  return null;\n}\n\nexport const findNodes = (editor: Editor, match: (node: Node) => boolean) => {\n  return Editor.nodes(editor, {\n    mode: \"all\",\n    at: {\n      anchor: Editor.start(editor, []),\n      focus: Editor.end(editor, [])\n    },\n    match\n  });\n};\n\nexport const getAncestor = (editor: ReactEditor, node: Node, level = 1) => {\n  let parent: Node | null = null;\n  let count = 0;\n  while (node && count !== level) {\n    count++;\n    try {\n      const path = ReactEditor.findPath(editor, node);\n      if (path.length === 0) {\n        return null;\n      }\n      parent = Editor.parent(editor, path)[0];\n      if (parent === editor) {\n        return null;\n      }\n      node = parent;\n    } catch (e) {}\n  }\n  return parent;\n};\n","import { css } from \"styled-components\";\nexport function OverrideTheme(\n  name: string,\n  props: {\n    theme: {\n      overrides?: {\n        [key: string]: ReturnType<typeof css>;\n      };\n    };\n  }\n) {\n  if (props.theme.overrides && props.theme.overrides[name]) {\n    return props.theme.overrides[name];\n  }\n  return undefined;\n}\n","import { useContext } from \"react\";\nimport { ChiefContext } from \"../chief-context\";\n\nexport function useChief() {\n  const ctx = useContext(ChiefContext);\n  if (!ctx) {\n    throw new Error(\n      'Chief context not found. Wrap your <Chief.Editor/> in a <Chief/> before using \"useChief()\"'\n    );\n  }\n  return ctx;\n}\n","import React from \"react\";\nimport { ReactEditor, RenderLeafProps } from \"slate-react\";\nimport { InjectedRenderLeaf } from \"../chief\";\nexport function handleRenderLeaf(\n  props: RenderLeafProps,\n  renderLeafs: InjectedRenderLeaf[],\n  editor?: ReactEditor\n) {\n  let copy = { ...props };\n  for (const renderLeaf of renderLeafs) {\n    const leaf = renderLeaf.renderLeaf(copy, editor);\n    if (leaf) {\n      copy = { ...copy, children: leaf };\n    }\n  }\n  return <span {...copy.attributes}>{copy.children}</span>;\n}\n","import { ElementTypeMatch, ChiefElement } from \"../chief\";\n\nexport function matchesType(\n  element: ChiefElement,\n  typeMatch?: ElementTypeMatch\n): element is ChiefElement {\n  return (\n    (Array.isArray(typeMatch) && typeMatch.includes(element.type)) ||\n    (typeof typeMatch === \"string\" && typeMatch === element.type) ||\n    Boolean(typeMatch instanceof RegExp && element.type.match(typeMatch))\n  );\n}\n","import React from \"react\";\nimport { ReactEditor } from \"slate-react\";\nimport { InjectedRenderElement, ChiefRenderElementProps } from \"../chief\";\nimport { matchesType } from \"../utils/matches-type\";\n\nexport function handleRenderElement(\n  props: ChiefRenderElementProps,\n  renderElements: InjectedRenderElement[],\n  editor?: ReactEditor\n) {\n  let element: JSX.Element | undefined;\n  for (let renderElement of renderElements) {\n    if (\n      renderElement.typeMatch === undefined ||\n      matchesType(props.element, renderElement.typeMatch)\n    ) {\n      if (renderElement.Component) {\n        element = <renderElement.Component {...props} />;\n      } else if (renderElement.renderElement) {\n        element =\n          typeof renderElement.renderElement === \"function\"\n            ? renderElement.renderElement(props, editor)\n            : React.cloneElement(renderElement.renderElement, props) || element;\n      }\n    }\n  }\n\n  return (element = element || <React.Fragment>{null}</React.Fragment>);\n}\n","import React, { useCallback } from \"react\";\nimport merge from \"lodash/merge\";\nimport orderBy from \"lodash/orderBy\";\nimport { Editor as SlateEditor, NodeEntry, Transforms } from \"slate\";\nimport {\n  Editable,\n  ReactEditor,\n  RenderElementProps,\n  RenderLeafProps\n} from \"slate-react\";\nimport styled from \"styled-components\";\nimport { isNodeActive } from \"../utils\";\nimport { OverrideTheme } from \"../override-theme\";\nimport { ChiefRenderElementProps } from \"./chief\";\nimport { useChief } from \"./hooks/use-chief\";\nimport { handleDecorate } from \"./handlers/handleDecorate\";\nimport { handleClick } from \"./handlers/handleClick\";\nimport { handleKeyUp } from \"./handlers/handleKeyUp\";\nimport { handleKeyDown } from \"./handlers/handleKeyDown\";\nimport { handleRenderLeaf } from \"./handlers/handleRenderLeaf\";\nimport { handleRenderElement } from \"./handlers/handleRenderElement\";\n\nexport const RichEditor = {\n  ...ReactEditor,\n  insertBlock(editor: SlateEditor, blockType: string) {\n    if (!isNodeActive(editor, blockType)) {\n      Transforms.setNodes(editor, {\n        type: blockType,\n        children: [{ text: \"\" }]\n      });\n    } else {\n      Transforms.insertNodes(editor, {\n        type: blockType,\n        children: [{ text: \"\" }]\n      });\n    }\n  }\n};\n\nconst EditorThemeWrapper = styled.div`\n  ${props => OverrideTheme(\"Editor\", props)}\n`;\n\nexport const Editor = React.memo(\n  (\n    props: {\n      children?: React.ReactNode;\n    } & React.ComponentProps<typeof Editable>\n  ) => {\n    const {\n      editor,\n      readOnly,\n      id,\n      renderLeafs,\n      renderElements,\n      onKeyDownHandlers,\n      decorations\n    } = useChief();\n    const { children, ...otherProps } = props;\n\n    const renderElement = useCallback(\n      (props: RenderElementProps) => {\n        return handleRenderElement(\n          props as ChiefRenderElementProps,\n          renderElements,\n          editor\n        );\n      },\n      [renderElements]\n    );\n\n    const renderLeaf = useCallback(\n      (props: RenderLeafProps) => {\n        return handleRenderLeaf(props, renderLeafs, editor);\n      },\n      [renderLeafs]\n    );\n\n    const decorate = useCallback(\n      (entry: NodeEntry) => handleDecorate(entry, editor, decorations),\n      [decorations]\n    );\n\n    const keyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        return handleKeyDown(event, editor, onKeyDownHandlers);\n      },\n      [onKeyDownHandlers]\n    );\n\n    // TODO\n    const keyUp = useCallback((event: React.KeyboardEvent<HTMLDivElement>) => {\n      handleKeyUp(event, editor);\n    }, []);\n    //TODO\n    const click = useCallback(\n      (event: React.MouseEvent<HTMLElement>) => handleClick(event, editor, []),\n      []\n    );\n\n    const paste = useCallback((event: React.ClipboardEvent<HTMLDivElement>) => {\n      const clipboardData = event.clipboardData;\n      const pastedData = clipboardData.getData(\"Text\");\n      if (!pastedData) {\n        return;\n      }\n      // editor.insertText(pastedData);\n    }, []);\n\n    // TODO\n    const onDOMBeforeInput = useCallback(e => {}, []);\n\n    return (\n      <React.Fragment>\n        <EditorThemeWrapper>\n          {children}\n          <Editable\n            onDOMBeforeInput={onDOMBeforeInput}\n            renderLeaf={renderLeaf}\n            renderElement={renderElement}\n            decorate={decorate}\n            onKeyDown={keyDown}\n            onKeyUp={keyUp}\n            onClick={click}\n            onPaste={paste}\n            readOnly={readOnly}\n            id={`${id}`}\n            {...otherProps}\n          />\n        </EditorThemeWrapper>\n      </React.Fragment>\n    );\n  }\n);\n","import { NodeEntry, Range } from \"slate\";\nimport { ReactEditor } from \"slate-react\";\nimport { InjectedDecorator } from \"../chief\";\n// TODO\nexport const handleDecorate = (\n  entry: NodeEntry,\n  editor: ReactEditor,\n  decorators: InjectedDecorator[]\n) => {\n  let ranges: Range[] = [];\n  for (let decorate of decorators) {\n    const result = decorate.decorator(entry, editor);\n    if (result) {\n      return (ranges = ranges.concat(result));\n    }\n  }\n  return ranges;\n};\n","import React from \"react\";\nimport { ReactEditor } from \"slate-react\";\nimport { KeyHandler } from \"../key-handler\";\nimport isHotkey from \"is-hotkey\";\nexport const handleKeyDown = (\n  event: React.KeyboardEvent<HTMLDivElement>,\n  editor: ReactEditor,\n  onKeyHandlers: KeyHandler[]\n) => {\n  for (let handler of onKeyHandlers) {\n    if (handler.pattern) {\n      if (\n        isHotkey(handler.pattern, event.nativeEvent) &&\n        handler.handler(event.nativeEvent, editor)\n      ) {\n        return;\n      }\n    } else if (handler.pattern === null) {\n      if (handler.handler(event.nativeEvent, editor)) {\n        return;\n      }\n    }\n  }\n};\n","import React from \"react\";\nimport {\n  Editor as SlateEditor,\n  Location\n} from \"slate\";\nimport { ReactEditor } from \"slate-react\";\nexport const handleKeyUp = (\n  event: React.KeyboardEvent<HTMLDivElement>,\n  editor: ReactEditor\n) => {\n  const { selection } = editor;\n  if (!selection) {\n    return;\n  }\n  const [, path] = SlateEditor.node(editor, selection as Location);\n  if (!path.length) {\n    return;\n  }\n  const [parent] = SlateEditor.parent(editor, path);\n  if (parent) {\n    // TODO: implement some kind of trigger\n    // for (let addon of addons) {\n    //   if (addon.triggers) {\n    //     for (let trigger of plugin.triggers) {\n    //       const matches = findMatches(trigger.pattern, trigger.range, editor);\n    //       if (matches.length) {\n    //         plugin.onTrigger && plugin.onTrigger(editor, matches, trigger);\n    //         return;\n    //       }\n    //     }\n    //   }\n    // }\n  }\n};\n","import React, { ReactNode, useCallback, useEffect } from \"react\";\nimport { RenderLeafProps } from \"slate-react\";\nimport { Node } from \"slate\";\nimport { handleRenderElement } from \"./handlers/handleRenderElement\";\nimport {\n  ChiefRenderElementProps,\n  InjectedRenderLeaf,\n  InjectedRenderElement,\n  ChiefElement\n} from \"./chief\";\nimport { handleRenderLeaf } from \"./handlers/handleRenderLeaf\";\nimport { useChiefRenderCore } from \"./chief-context\";\n\nexport type iPresenter<T extends ChiefElement = any> = {\n  element?: InjectedRenderElement<T>;\n  leaf?: InjectedRenderLeaf;\n};\n\ntype PresenterElementProps = Omit<ChiefRenderElementProps, \"attributes\">;\ntype PresenterLeafProps = Omit<RenderLeafProps, \"attributes\">;\ntype PresenterElement = PresenterElementProps[\"element\"];\n\ninterface SlatePresentationContextValue {\n  renderElement: (props: PresenterElementProps) => ReactNode;\n  renderLeaf: (props: PresenterLeafProps) => ReactNode;\n}\n\nconst SlatePresentationContext = React.createContext<SlatePresentationContextValue | null>(\n  null\n);\n\nfunction useSlatePresentation() {\n  const ctx = React.useContext(SlatePresentationContext);\n  if (!ctx) {\n    throw new Error(\"No SlatePresentationContext\");\n  }\n  return ctx;\n}\n\nfunction isElement(value: any) {\n  return value instanceof Object && Array.isArray(value.children);\n}\n\nfunction Element(props: { element: PresenterElement }) {\n  const { renderElement } = useSlatePresentation();\n  const { element } = props;\n  return (\n    <React.Fragment>\n      {renderElement({\n        children: <Children children={element.children} />,\n        element\n      })}\n    </React.Fragment>\n  );\n}\n\nfunction Leaf({ leaf = { text: \"\" } }: any) {\n  const { renderLeaf } = useSlatePresentation();\n\n  return (\n    <React.Fragment>\n      {renderLeaf({\n        children: <span>{leaf.text}</span>,\n        leaf,\n        text: leaf.text\n      })}\n    </React.Fragment>\n  );\n}\n\nfunction Children(props: { children: Node[] }) {\n  const { children } = props;\n  return (\n    <React.Fragment>\n      {children.map((child: any, i: number) => {\n        if (isElement(child)) {\n          return <Element key={i} element={child} />;\n        } else {\n          return <Leaf key={i} leaf={child} />;\n        }\n      })}\n    </React.Fragment>\n  );\n}\n\nexport function ChiefPresentation({\n  value = [],\n  presenters = [],\n  overrideRenderElement,\n  overrideRenderLeaf\n}: {\n  value: Node[];\n  presenters: iPresenter[];\n  overrideRenderElement?: (\n    props: PresenterElementProps\n  ) => JSX.Element | undefined;\n  overrideRenderLeaf?: (props: PresenterLeafProps) => JSX.Element | undefined;\n}) {\n  const {\n    renderLeafs,\n    renderElements,\n    injectRenderElement,\n    injectRenderLeaf\n  } = useChiefRenderCore();\n\n  useEffect(() => {\n    for (const presenter of presenters) {\n      if (presenter.element) {\n        injectRenderElement(presenter.element);\n      }\n      if (presenter.leaf) {\n        injectRenderLeaf(presenter.leaf);\n      }\n    }\n  }, []);\n\n  return (\n    <SlatePresentationContext.Provider\n      value={{\n        renderElement: useCallback(\n          (props: PresenterElementProps) => {\n            const overridedElement =\n              overrideRenderElement && overrideRenderElement(props);\n            if (overridedElement) {\n              return overridedElement;\n            }\n            return handleRenderElement(props as any, renderElements);\n          },\n          [renderElements]\n        ),\n        renderLeaf: useCallback(\n          (props: PresenterLeafProps) => {\n            const overridedLeaf =\n              overrideRenderLeaf && overrideRenderLeaf(props);\n            if (overridedLeaf) {\n              return overridedLeaf;\n            }\n            return handleRenderLeaf(props as any, renderLeafs);\n          },\n          [renderLeafs]\n        )\n      }}\n    >\n      <Children children={value} />\n    </SlatePresentationContext.Provider>\n  );\n}\n","import { useEffect, useCallback } from \"react\";\nimport { InjectedLabels, Label } from \"../chief\";\nimport { useChief } from \"./use-chief\";\n\nexport function useLabels(labels?: InjectedLabels) {\n  const { labels: injectedLabels, injectLabels } = useChief();\n  const getLabel = useCallback(\n    (label: Label) => {\n      if (typeof injectedLabels[label.key] === \"string\") {\n        return injectedLabels[label.key];\n      }\n      return label.defaultLabel;\n    },\n    [injectedLabels]\n  );\n\n  useEffect(() => {\n    if (labels) {\n      injectLabels(labels);\n    }\n  }, []);\n\n  return [getLabel, injectLabels] as const;\n}\n","import { useEffect } from \"react\";\nimport { useChief } from \"./use-chief\";\nimport { KeyHandler } from \"../key-handler\";\n/**\n * Respond to onKeyDown events in the editor.\n * If you want to receive all onKeyDown events, you can leave out the pattern.\n * For responding to certain key down combos, you can specify a key pattern, eg. \"mod+b\".\n * @param handler Function to call when a key or combo is pressed\n * @param overrides\n * @param deps\n */\n\nexport function useOnKeyDown(handler: KeyHandler, deps: any[] = []) {\n  const chief = useChief();\n  useEffect(() => {\n    if (handler.pattern !== null) {\n      chief.injectOnKeyHandler(handler);\n    }\n    return () => chief.removeOnKeyHandler(handler);\n  }, deps);\n}\n","import { useEffect } from \"react\";\nimport { OnPlugin } from \"../../addon\";\nimport { useChief } from \"./use-chief\";\n\nexport function usePlugin(plugin: OnPlugin) {\n  const chief = useChief();\n  useEffect(() => {\n    chief.injectPlugin(plugin);\n    return () => chief.removePlugin(plugin);\n  }, []);\n}\n","import { useEffect } from \"react\";\nimport { ChiefElement, InjectedRenderElement } from \"../chief\";\nimport { useChief } from \"./use-chief\";\n\nexport function useRenderElement<T extends ChiefElement = ChiefElement>(\n  ire: InjectedRenderElement<T>,\n  deps: any[] = []\n) {\n  const chief = useChief();\n  useEffect(() => {\n    chief.injectRenderElement(ire);\n    return () => chief.removeRenderElement(ire);\n  }, deps);\n}\n","import { useEffect } from \"react\";\nimport { InjectedRenderLeaf } from \"../chief\";\nimport { useChief } from \"./use-chief\";\n\nexport function useRenderLeaf(irl: InjectedRenderLeaf, deps: any[] = []) {\n  const chief = useChief();\n  useEffect(() => {\n    chief.injectRenderLeaf(irl);\n    return () => chief.removeRenderLeaf(irl);\n  }, deps);\n}\n","import styled from \"styled-components\";\nimport { OverrideTheme } from \"./override-theme\";\n\nexport const PlaceholderHint = styled.span<{\n  isEmpty: boolean;\n  placeholder?: string;\n  hoverHint?: string;\n}>`\n  display: inline-block;\n  width: 100%;\n  ::before {\n    filter: brightness(40%) invert(50%) opacity(0.2) grayscale(100%);\n    content: \"${props =>\n      props.isEmpty && props.placeholder && props.placeholder.length > 0\n        ? props.placeholder\n        : ``}\"\n;\n    pointer-events: none;\n    user-select: none;\n    position: absolute;\n  }\n  &:hover:before {\n    content: \"${props =>\n      props.isEmpty && props.hoverHint && !props.placeholder\n        ? props.hoverHint\n        : props.isEmpty && props.placeholder\n        ? props.placeholder\n        : \"\"}\";\n  }\n  ${props => OverrideTheme(\"PlaceholderHint\", props)}\n`;\n","import React, { memo, ReactNode } from \"react\";\nimport { RenderLeafProps } from \"slate-react\";\n\nexport function renderLeaf(\n  props: RenderLeafProps,\n  leafType: string,\n  rectType: any,\n  elementProps?: any\n) {\n  const { children, leaf } = props;\n  if (leaf[leafType]) {\n    return (\n      <Leaf {...props}>\n        {React.createElement(rectType, elementProps, children)}\n      </Leaf>\n    );\n  }\n  return undefined;\n}\n\nconst Leaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props;\n  return <span {...attributes} children={children} />;\n};\n","import styled, { css } from \"styled-components\";\nimport { OverrideTheme } from \"../override-theme\";\n\nexport const uiStyle = css`\n  font-size: 14px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: normal;\n  a {\n    color: white;\n  }\n  ${props => OverrideTheme(\"ui\", props)}\n`;\n\nexport const UiWrap = styled.div`\n  ${uiStyle}\n`;\n","import styled from \"styled-components\";\nimport { OverrideTheme } from \"../override-theme\";\nimport { uiStyle } from \"./ui-wrap\";\nexport const ButtonBase = styled.button`\n  ${uiStyle}\n  line-height: 1.15;\n  margin: 0;\n  cursor: pointer;\n  &:focus {\n    outline: none;\n  }\n  ${props => OverrideTheme(\"ButtonBase\", props)}\n`;\n","import styled from \"styled-components\";\nimport { ButtonBase } from \"./button-base\";\nimport { OverrideTheme } from \"../override-theme\";\n\nexport const StyledToolbarBtn = styled(ButtonBase)<{\n  isActive?: boolean;\n  rounded?: boolean;\n}>`\n  width: 100%;\n  transition: all 250ms;\n  background-color: white;\n  &:hover {\n    background-color: ${props =>\n      props.disabled ? undefined : props.theme.colors.gray[200]};\n  }\n  &:active {\n    background-color: ${props => props.theme.colors.gray[100]};\n  }\n  &:first-child {\n    padding-left: 10px;\n  }\n  &:last-child {\n    padding-right: 10px;\n  }\n  border-radius: ${props => (props.rounded ? \"5px\" : undefined)};\n  padding: 8px;\n  color: ${props => (props.isActive ? props.theme.colors.primary : undefined)};\n  border: none;\n  ${props => OverrideTheme(\"StyledToolbarBtn\", props)}\n`;\n","import React, { useRef, ReactNode, useState, useEffect } from \"react\";\nimport Overlay from \"react-overlays/Overlay\";\nimport { useGlobalHover, useHover } from \"./utils\";\nimport styled, { css } from \"styled-components\";\nimport { UiWrap } from \"./ui/ui-wrap\";\n\nexport function ElementHoverTip(\n  props: {\n    children:\n      | ReactNode\n      | ((\n          triggerRef: React.RefObject<HTMLDivElement>,\n          isHovering: boolean\n        ) => ReactNode);\n    tip?: ReactNode;\n    delayed?: boolean;\n  } & Omit<\n    React.ComponentProps<typeof Overlay>,\n    \"children\" | \"target\" | \"container\"\n  >\n) {\n  const containerRef = useRef(null);\n  const overlayRef = useRef(null);\n  const [triggerRef, isHovering] = useHover<HTMLDivElement>();\n  const isOverlayHovering = useGlobalHover(overlayRef.current);\n  const isOverlayHoveringRef = useRef(isOverlayHovering);\n  isOverlayHoveringRef.current = isOverlayHovering;\n  const isHoveringRef = useRef(isHovering);\n  isHoveringRef.current = isHovering;\n  const [show, setShow] = useState(isHovering);\n  useEffect(() => {\n    if (isHovering) {\n      setShow(true);\n    } else if (delayed) {\n      setTimeout(() => !isOverlayHoveringRef.current && setShow(false), 150);\n    } else {\n      setShow(false);\n    }\n  }, [isHovering]);\n  useEffect(() => {\n    if (!isOverlayHovering) {\n      setTimeout(() => !isHoveringRef.current && setShow(false), 150);\n    }\n  }, [isOverlayHovering]);\n  const { children, tip, delayed, ...overlayProps } = props;\n  const overlay = (\n    <Overlay\n      ref={overlayRef}\n      show={Boolean(tip) && show}\n      container={containerRef}\n      target={triggerRef}\n      {...overlayProps}\n    >\n      {({ props, arrowProps, placement }) => (\n        <Tooltip {...props} placement={placement}>\n          <Arrow\n            {...arrowProps}\n            placement={placement}\n            style={arrowProps.style}\n          />\n          <StyledTooltipBody>{tip}</StyledTooltipBody>\n        </Tooltip>\n      )}\n    </Overlay>\n  );\n  const container = (\n    <div\n      contentEditable={false}\n      style={{ position: \"absolute\", width: \"100%\" }}\n      ref={containerRef}\n    ></div>\n  );\n  if (typeof children === \"function\") {\n    return (\n      <React.Fragment>\n        {container}\n        {children(triggerRef, isHovering)}\n        {overlay}\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        {container}\n        <span ref={triggerRef}>{children}</span>\n        {overlay}\n      </React.Fragment>\n    );\n  }\n}\n\nexport const StyledTooltipBody = styled(UiWrap)`\n  width: 100%;\n  font-size: 12px;\n  padding: 3px 8px;\n  color: #fff;\n  text-align: center;\n  border-radius: 3px;\n  background-color: #000;\n  div:nth-child(1) {\n  }\n  div:nth-child(2) {\n    font-weight: bold;\n    font-size: 0.7em;\n    color: ${props => props.theme.colors.gray[400]};\n  }\n`;\n\nexport const Arrow = styled.div<{ placement: string }>`\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-style: solid;\n\n  ${p => {\n    switch (p.placement) {\n      case \"left\":\n        return css`\n          right: 0;\n          border-width: 5px 0 5px 5px;\n          border-color: transparent transparent transparent #000;\n        `;\n      case \"right\":\n        return css`\n          left: 0;\n          border-width: 5px 5px 5px 0;\n          border-color: transparent #232323 transparent transparent;\n        `;\n      case \"top\":\n        return css`\n          bottom: 0;\n          border-width: 5px 5px 0;\n          border-color: #232323 transparent transparent transparent;\n        `;\n      case \"bottom\":\n        return css`\n          top: 0;\n          border-width: 0 5px 5px;\n          border-color: transparent transparent #232323 transparent;\n        `;\n      default:\n        return \"\";\n    }\n  }}\n`;\n\nexport const Tooltip = styled.div<{ placement: string }>`\n  position: absolute;\n  padding: 0 5px;\n\n  ${p => {\n    switch (p.placement) {\n      case \"left\":\n        return css`\n          padding: 0 5px;\n        `;\n      case \"right\":\n        return css`\n          padding: 0 5px;\n        `;\n      case \"top\":\n        return css`\n          padding: 5px 0;\n        `;\n      case \"bottom\":\n        return css`\n          padding: 5px 0;\n        `;\n      default:\n        return \"\";\n    }\n  }}\n`;\n","import React from \"react\";\nimport { StyledToolbarBtn } from \"./ui/styled-toolbar-btn\";\nimport Overlay from \"react-overlays/Overlay\";\nimport { Label } from \"./chief/chief\";\nimport { useLabels } from \"./chief/hooks/use-labels\";\nimport { ElementHoverTip } from \"./element-hover-tip\";\n\nexport type Ref = HTMLElement;\n\ntype Props = {\n  tooltip?: {\n    label: Label;\n    shortcut?: string;\n    placement?: React.ComponentProps<typeof Overlay>[\"placement\"];\n  };\n  onMouseDown?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n} & React.ComponentProps<typeof StyledToolbarBtn>;\n\nexport const ToolbarBtn = React.forwardRef<Ref, Props>((props, ref) => {\n  const { onClick, onMouseDown, tooltip, ...otherProps } = props;\n  const [labels] = useLabels();\n\n  return (\n    <ElementHoverTip\n      placement=\"top\"\n      tip={\n        tooltip && (\n          <React.Fragment>\n            <div>\n              <strong>{labels(tooltip.label)}</strong>\n            </div>\n            <div>{tooltip.shortcut}</div>\n          </React.Fragment>\n        )\n      }\n    >\n      <StyledToolbarBtn\n        ref={ref}\n        onMouseDown={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n          if (onClick) {\n            onClick(e);\n            return;\n          }\n          onMouseDown && onMouseDown(e);\n        }}\n        {...otherProps}\n      />\n    </ElementHoverTip>\n  );\n});\n","import React from \"react\";\nimport { useSlate } from \"slate-react\";\nimport { ToolbarBtn } from \"./ToolbarBtn\";\nimport { Editor, Transforms, Text } from \"slate\";\n\nexport function toggleFormat(editor: Editor, format: string) {\n  let isFormatted = isMark(editor, format);\n  Transforms.setNodes(\n    editor,\n    { [format]: !isFormatted },\n    { match: n => Text.isText(n), split: true }\n  );\n}\n\nconst isMark = (editor: Editor, formatType: string) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => Boolean(n[formatType])\n  });\n  return Boolean(match);\n};\n\nexport function MarkBtn(\n  props: {\n    markType: string;\n  } & React.ComponentProps<typeof ToolbarBtn>\n) {\n  const { markType: formatType, ...otherProps } = props;\n  const editor = useSlate();\n  const isActive = isMark(editor, props.markType);\n  return (\n    <ToolbarBtn\n      isActive={isActive}\n      onMouseDown={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        toggleFormat(editor, props.markType);\n      }}\n      {...otherProps}\n    />\n  );\n}\n","import { toKeyName } from \"is-hotkey\";\n\nexport function shortcutText(shortcut: string) {\n  return toKeyName(shortcut).replace(\"mod\", \"⌘\").toUpperCase();\n}\n","import React, {\n  useEffect,\n  useState,\n\n  useContext\n} from \"react\";\nimport { Control } from \"../../control\";\n\nconst ControlsContext = React.createContext<ReturnType<\n  typeof useProvideControlContext\n> | null>(null);\n\nexport function useProvideControlContext() {\n  const [controls, setControls] = useState<Control[]>([]);\n  function injectControl(control: Control) {\n    setControls(controls => [...controls, control]);\n  }\n\n  function removeControl(control: Control) {\n    setControls(it => {\n      const toSlicer = [...it];\n      toSlicer.splice(toSlicer.indexOf(control), 1);\n      return toSlicer;\n    });\n  }\n  return { controls, injectControl, removeControl };\n}\n\nexport function useControlsProvider() {\n  const value = useProvideControlContext();\n  return [ControlsContext, value] as const;\n}\n\nexport function useProvidedControls() {\n  const ctx = useContext(ControlsContext);\n  if (!ctx) {\n    throw new Error(\"No ControlsContext.Provider in scope.\");\n  }\n  return ctx;\n}\n\nexport function useControl<T extends React.FunctionComponent<any>>(\n  control: Control<T>\n) {\n  const { injectControl, removeControl } = useProvidedControls();\n  useEffect(() => {\n    injectControl(control);\n    return () => removeControl(control);\n  }, []);\n  return null;\n}\n","import React from \"react\";\nimport { AddonProps } from \"../../addon\";\nimport { renderLeaf } from \"../../leaf-renderer\";\nimport { MarkBtn, toggleFormat } from \"../../mark-button\";\nimport { useRenderLeaf } from \"../../chief/hooks/use-render-leaf\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\nimport { useLabels } from \"../../chief/hooks/use-labels\";\nimport { shortcutText } from \"../../shortcut\";\nimport { InjectedRenderLeaf } from \"../../chief\";\nimport { iPresenter } from \"../../chief/chief-presentation\";\nimport { useControl } from \"../../chief/controls\";\n\nconst shortcut = \"mod+i\";\n\nexport function ItalicControl(props: { children: React.ReactNode }) {\n  useControl({\n    category: \"marks\",\n    render: () => {\n      return (\n        <MarkBtn\n          tooltip={{\n            label: {\n              key: \"marks.italic\",\n              defaultLabel: \"Italic\"\n            },\n            shortcut: shortcutText(shortcut)\n          }}\n          markType=\"italic\"\n        >\n          {props.children}\n        </MarkBtn>\n      );\n    }\n  });\n  return null;\n}\n\nconst _renderLeaf: InjectedRenderLeaf = {\n  renderLeaf: props => renderLeaf(props, \"italic\", \"em\")\n};\n\nconst Presenter: iPresenter = {\n  leaf: _renderLeaf\n};\n\nexport function ItalicAddon(props: AddonProps) {\n  useLabels(props.labels);\n  useRenderLeaf(_renderLeaf);\n  useOnKeyDown({\n    pattern: shortcut,\n    handler: (event, editor) => {\n      event.preventDefault();\n      toggleFormat(editor, \"italic\");\n      return true;\n    }\n  });\n  return null;\n}\n\nItalicAddon.Presenter = Presenter;\n","import React, { ReactNode } from \"react\";\nimport { AddonProps } from \"../../addon\";\nimport { renderLeaf } from \"../../leaf-renderer\";\nimport { MarkBtn, toggleFormat } from \"../../mark-button\";\nimport { useRenderLeaf } from \"../../chief/hooks/use-render-leaf\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\nimport { useLabels } from \"../../chief/hooks/use-labels\";\nimport { InjectedRenderLeaf } from \"../../chief\";\nimport { iPresenter } from \"../../chief/chief-presentation\";\nimport { useControl } from \"../../chief/controls\";\nimport { shortcutText } from \"../../shortcut\";\n\nconst shortcut = \"mod+u\";\n\nexport function UnderlineControl(props: { children: ReactNode }) {\n  useControl({\n    category: \"marks\",\n    render: () => {\n      return (\n        <MarkBtn\n          tooltip={{\n            label: {\n              key: \"marks.underline\",\n              defaultLabel: \"Underline\"\n            },\n            shortcut: shortcutText(shortcut)\n          }}\n          markType=\"underline\"\n        >\n          {props.children}\n        </MarkBtn>\n      );\n    }\n  });\n  return null;\n}\n\nconst _renderLeaf: InjectedRenderLeaf = {\n  renderLeaf: props => renderLeaf(props, \"underline\", \"u\")\n};\n\nconst Presenter: iPresenter = {\n  leaf: _renderLeaf\n};\n\nexport function UnderlineAddon(props: AddonProps) {\n  useLabels(props.labels);\n  useRenderLeaf(_renderLeaf);\n  useOnKeyDown({\n    pattern: shortcut,\n    handler: (event, editor) => {\n      event.preventDefault();\n      toggleFormat(editor, \"underline\");\n      return true;\n    }\n  });\n  return null;\n}\n\nUnderlineAddon.Presenter = Presenter;\n","import React, { ReactNode } from \"react\";\nimport { AddonProps } from \"../../addon\";\nimport { renderLeaf } from \"../../leaf-renderer\";\nimport { MarkBtn, toggleFormat } from \"../../mark-button\";\nimport { useRenderLeaf } from \"../../chief/hooks/use-render-leaf\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\nimport { useLabels } from \"../../chief/hooks/use-labels\";\nimport { shortcutText } from \"../../shortcut\";\nimport { InjectedRenderLeaf } from \"../../chief\";\nimport { iPresenter } from \"../../chief/chief-presentation\";\nimport { useControl } from \"../../chief/controls\";\n\nconst shortcut = \"mod+s\";\n\nexport function StrikethroughControl(props: { children: ReactNode }) {\n  useControl({\n    category: \"marks\",\n    render: () => {\n      return (\n        <MarkBtn\n          tooltip={{\n            label: {\n              key: \"marks.strikethrough\",\n              defaultLabel: \"Strike-through\"\n            },\n            shortcut: shortcutText(shortcut)\n          }}\n          markType=\"strikethrough\"\n        >\n          {props.children}\n        </MarkBtn>\n      );\n    }\n  });\n  return null;\n}\n\nconst _renderLeaf: InjectedRenderLeaf = {\n  renderLeaf: props => renderLeaf(props, \"strikethrough\", \"s\")\n};\n\nconst Presenter: iPresenter = {\n  leaf: _renderLeaf\n};\n\nexport function StrikethroughAddon(props: AddonProps) {\n  useLabels(props.labels);\n  useRenderLeaf(_renderLeaf);\n  useOnKeyDown({\n    pattern: shortcut,\n    handler: (event, editor) => {\n      event.preventDefault();\n      toggleFormat(editor, \"strikethrough\");\n      return true;\n    }\n  });\n  return null;\n}\n\nStrikethroughAddon.Presenter = Presenter;\n","import React from \"react\";\nimport { useFocused, useSelected, useEditor } from \"slate-react\";\nimport { PlaceholderHint } from \"../../placeholder-hint\";\nimport { Editor } from \"slate\";\nimport { useLabels, ChiefRenderElementProps } from \"../../chief\";\n\nexport const Heading = (props: ChiefRenderElementProps) => {\n  const editor = useEditor();\n  const isFocused = useFocused();\n  const isSelected = useSelected();\n  const defaultPlaceholderTexts = {\n    h1: \"Heading 1\",\n    h2: \"Heading 2\",\n    h3: \"Heading 3\",\n    h4: \"Heading 4\",\n    h5: \"Heading 5\",\n    h6: \"Heading 6\"\n  };\n  const [getLabel] = useLabels();\n  let placeholder = getLabel({\n    key: `elements.heading.${props.element.type}.placeholder`,\n    defaultLabel: defaultPlaceholderTexts[props.element.type]\n  });\n\n  return React.createElement(\n    props.element.type,\n    props.attributes,\n    <PlaceholderHint\n      isEmpty={Editor.isEmpty(editor, props.element)}\n      placeholder={isFocused && isSelected ? placeholder : undefined}\n    >\n      {props.children}\n    </PlaceholderHint>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport { AddonProps } from \"../../addon\";\nimport { Heading } from \"./Heading\";\nimport { Transforms, Editor, Range, Element } from \"slate\";\nimport { useSlate, ReactEditor } from \"slate-react\";\nimport { isNodeActive } from \"../../utils\";\nimport { ToolbarBtn } from \"../../ToolbarBtn\";\nimport { useRenderElement } from \"../../chief/hooks/use-render-element\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\nimport { RichEditor } from \"../../chief/editor\";\nimport { Control } from \"../../control\";\nimport { iPresenter } from \"../../chief/chief-presentation\";\nimport { useControl } from \"../../chief/controls\";\n\nexport const headingTypes = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"] as const;\n\nexport function HeadingControl(props: {\n  heading: typeof headingTypes[number];\n  children?: ReactNode;\n}) {\n  function createHeadingBlockControl(\n    heading: typeof headingTypes[number]\n  ): Control {\n    return {\n      category: \"headings\",\n      render: editor => (\n        <ToolbarBtn\n          tooltip={{\n            label: {\n              key: `elements.heading.${heading}.placeholder`,\n              defaultLabel: heading\n            }\n          }}\n          isActive={isNodeActive(editor, heading)}\n          onMouseDown={(\n            _e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n          ) => {\n            ReactEditor.focus(editor);\n            RichEditor.insertBlock(editor, heading);\n          }}\n        >\n          {props.children || heading.toUpperCase()}\n        </ToolbarBtn>\n      )\n    };\n  }\n  useControl(createHeadingBlockControl(props.heading));\n  return null;\n}\n\nconst Presenter: iPresenter = {\n  element: {\n    typeMatch: headingTypes,\n    renderElement: props =>\n      React.createElement(props.element.type, null, props.children)\n  }\n};\n\nexport function HeadingsAddon(_props: AddonProps) {\n  useRenderElement({\n    typeMatch: headingTypes,\n    renderElement: props => <Heading {...props} />\n  });\n  useOnKeyDown({\n    pattern: \"Enter\",\n    handler: (event, editor) => {\n      const { selection } = editor;\n      if (selection && Range.isCollapsed(selection)) {\n        const [match] = Editor.nodes(editor, {\n          match: n =>\n            typeof n.type === \"string\" && Boolean(n.type?.match(/(h[1-6])/))\n        });\n        if (match) {\n          event.preventDefault();\n          const [node] = match;\n          if (Element.isElement(node) && Editor.isEmpty(editor, node)) {\n            Transforms.setNodes(editor, { type: \"paragraph\" });\n          } else {\n            Transforms.insertNodes(editor, {\n              type: \"paragraph\",\n              children: [{ text: \"\" }]\n            });\n          }\n          return true;\n        }\n      }\n      return false;\n    }\n  });\n  return null;\n}\n\nfunction toggleHeading(editor: Editor, heading: string) {\n  const isHeaderOfType = isHeadingType(editor, heading);\n  if (isHeaderOfType) {\n    Transforms.setNodes(editor, {\n      type: \"paragraph\"\n    });\n  } else {\n    Transforms.setNodes(editor, {\n      type: heading\n    });\n  }\n}\n\nexport const isHeadingType = (editor: Editor, header: string) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === header\n  });\n  return Boolean(match);\n};\n\nfunction insertHeader(editor: Editor, heading: string) {\n  Transforms.insertNodes(editor, {\n    type: heading,\n    children: [{ text: \"\" }]\n  });\n}\n\nfunction HeadingBtn(props: { headingType: string; children: React.ReactNode }) {\n  const editor = useSlate();\n  const isActive = isHeadingType(editor, props.headingType);\n  return (\n    <ToolbarBtn\n      isActive={isActive}\n      onMouseDown={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        toggleHeading(editor, props.headingType);\n      }}\n    >\n      {props.children}\n    </ToolbarBtn>\n  );\n}\n\nHeadingsAddon.Presenter = Presenter;\n","import { AddonProps } from \"../../addon\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\nimport { Range } from \"slate\";\n\nexport function PreventNewlineAddon(props: AddonProps) {\n  useOnKeyDown({\n    pattern: \"enter+shift\",\n    handler: (event, editor) => {\n      if (editor.selection && Range.isCollapsed(editor.selection)) {\n        event.preventDefault();\n        event.stopPropagation();\n        editor.insertText(\"\\n\");\n        return true;\n      }\n      return false;\n    }\n  });\n  return null;\n}\n","import { Editor, Transforms, Range } from \"slate\";\nimport { usePlugin } from \"../../chief/hooks/use-plugin\";\n\nexport function ResetToParagraphAddon() {\n  usePlugin({\n    deleteBackward: (deleteBackward, editor) => (...args) => {\n      const { selection } = editor;\n      if (selection && Range.isCollapsed(selection)) {\n        const [parent, path] = Editor.parent(editor, selection);\n        const isParagraph = parent.type === \"paragraph\";\n        if (\n          path.length === 1 &&\n          !isParagraph &&\n          selection &&\n          selection.focus.offset === 0\n        ) {\n          return Transforms.setNodes(editor, { type: \"paragraph\" });\n        }\n      }\n      return deleteBackward(...args);\n    }\n  });\n  return null;\n}\n","import React from \"react\";\nimport { AddonProps } from \"../../addon\";\nimport { useLabels } from \"../../chief/hooks/use-labels\";\n\nexport function LabelsAddon(props: Pick<AddonProps, \"labels\">) {\n  useLabels(props.labels);\n  return null;\n}\n","import React from \"react\";\nimport { Editor as SlateEditor, Range } from \"slate\";\nimport {\n  RenderElementProps,\n  useFocused,\n  useSelected,\n  useSlate\n} from \"slate-react\";\nimport { PlaceholderHint } from \"../../placeholder-hint\";\nimport { ChiefRenderElementProps } from \"../../chief/chief\";\n\nexport function ParagraphElement(\n  props: ChiefRenderElementProps & { placeholder?: string; hint?: string }\n) {\n  const editor = useSlate();\n  const isFocused = useFocused();\n  const isSelected = useSelected();\n  return (\n    <p {...props.attributes}>\n      <PlaceholderHint\n        isEmpty={SlateEditor.isEmpty(editor, props.element)}\n        hoverHint={props.hint}\n        placeholder={isFocused && isSelected ? props.placeholder : undefined}\n      >\n        {React.Children.map(props.children, it => it)}\n      </PlaceholderHint>\n    </p>\n  );\n}\n","import React, { ReactNode } from \"react\";\nimport { useRenderElement } from \"../../chief/hooks/use-render-element\";\nimport { ParagraphElement } from \"./paragraph-element\";\nimport { useLabels, ElementTypeMatch, RichEditor } from \"../../chief\";\nimport { AddonProps } from \"../../addon\";\nimport { iPresenter } from \"../../chief/chief-presentation\";\nimport { useControl } from \"../../chief/controls\";\nimport { ToolbarBtn } from \"../../ToolbarBtn\";\nimport { isNodeActive } from \"../../utils\";\nimport { ReactEditor, useSlate } from \"slate-react\";\n\nconst TYPE: ElementTypeMatch = \"paragraph\";\n\nexport function ParagraphControl(props: { children: ReactNode }) {\n  return useControl({\n    category: \"text\",\n    Component: () => {\n      const editor = useSlate();\n      return (\n        <ToolbarBtn\n          tooltip={{\n            label: {\n              key: `elements.paragraph.placeholder`,\n              defaultLabel: \"Paragraph\"\n            }\n          }}\n          isActive={isNodeActive(editor, \"paragraph\")}\n          onMouseDown={() => {\n            RichEditor.insertBlock(editor, \"paragraph\");\n            ReactEditor.focus(editor);\n          }}\n        >\n          {props.children}\n        </ToolbarBtn>\n      );\n    }\n  });\n}\n\nexport function ParagraphAddon({\n  showHint = true,\n  showPlaceholder = true,\n  labels\n}: {\n  showHint?: boolean;\n  showPlaceholder?: boolean;\n} & AddonProps) {\n  const [getLabel] = useLabels(labels);\n  useRenderElement(\n    {\n      typeMatch: TYPE,\n      renderElement: props => (\n        <ParagraphElement\n          hint={\n            showHint\n              ? getLabel({\n                  key: \"elements.paragraph.hint\",\n                  defaultLabel: \"Click to start typing\"\n                })\n              : undefined\n          }\n          placeholder={\n            showPlaceholder\n              ? getLabel({\n                  key: \"elements.paragraph.placeholder\",\n                  defaultLabel: \"Text\"\n                })\n              : undefined\n          }\n          {...props}\n        ></ParagraphElement>\n      )\n    },\n    [getLabel]\n  );\n  return null;\n}\n\nconst ParagraphPresenter: iPresenter = {\n  element: {\n    typeMatch: TYPE,\n    renderElement: props => <p>{props.children}</p>\n  }\n};\n\nParagraphAddon.Presenter = ParagraphPresenter;\n","import React from \"react\";\nimport { AddonProps } from \"../../addon\";\nimport { renderLeaf } from \"../../leaf-renderer\";\nimport { useRenderLeaf } from \"../../chief/hooks/use-render-leaf\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\nimport { useLabels } from \"../../chief/hooks/use-labels\";\nimport { MarkBtn, toggleFormat } from \"../../mark-button\";\nimport { shortcutText } from \"../../shortcut\";\nimport { ReactEditor } from \"slate-react\";\nimport { InjectedRenderLeaf } from \"../../chief\";\nimport { iPresenter } from \"../../chief/chief-presentation\";\nimport { useControl } from \"../../chief/controls\";\n\nconst shortcut = \"mod+b\";\n\nconst action = (editor: ReactEditor) => toggleFormat(editor, \"bold\");\n\nconst _renderLeaf: InjectedRenderLeaf = {\n  renderLeaf: props => renderLeaf(props, \"bold\", \"strong\")\n};\n\nexport function BoldAddon(props: AddonProps) {\n  // useAddonAction(\"bold\", action);\n\n  // const boldToggle = useAddonAction(\"bold\");\n\n  useLabels(props.labels);\n  useRenderLeaf(_renderLeaf);\n  useOnKeyDown({\n    pattern: shortcut,\n    handler: (event, editor) => {\n      event.preventDefault();\n      action(editor);\n      return true;\n    }\n  });\n  return null;\n}\n\nconst Presenter: iPresenter = {\n  leaf: _renderLeaf\n};\n\nexport function BoldControl(props: { children: React.ReactNode }) {\n  return useControl({\n    category: \"marks\",\n    Component: () => {\n      return (\n        <MarkBtn\n          tooltip={{\n            label: {\n              key: \"marks.bold\",\n              defaultLabel: \"Bold\"\n            },\n            shortcut: shortcutText(shortcut)\n          }}\n          markType=\"bold\"\n        >\n          {props.children}\n        </MarkBtn>\n      );\n    }\n  });\n}\n\nBoldAddon.Presenter = Presenter;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst HiddenFileInput = styled.input.attrs({\n  type: \"file\"\n})`\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute !important;\n  white-space: nowrap;\n  width: 1px;\n`;\n\nexport const FileUpload = React.forwardRef<\n  HTMLInputElement,\n  Omit<React.InputHTMLAttributes<HTMLInputElement>, \"type\" | \"id\">\n>((props, ref) => <HiddenFileInput ref={ref} {...props} />);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isPresent(t) {\n    return t !== undefined && t !== null;\n}\nexports.isPresent = isPresent;\nfunction isDefined(t) {\n    return t !== undefined;\n}\nexports.isDefined = isDefined;\nfunction isFilled(t) {\n    return t !== null;\n}\nexports.isFilled = isFilled;\n//# sourceMappingURL=index.js.map","export const ImageExtensions = [\n  \"ase\",\n  \"art\",\n  \"bmp\",\n  \"blp\",\n  \"cd5\",\n  \"cit\",\n  \"cpt\",\n  \"cr2\",\n  \"cut\",\n  \"dds\",\n  \"dib\",\n  \"djvu\",\n  \"egt\",\n  \"exif\",\n  \"gif\",\n  \"gpl\",\n  \"grf\",\n  \"icns\",\n  \"ico\",\n  \"iff\",\n  \"jng\",\n  \"jpeg\",\n  \"jpg\",\n  \"jfif\",\n  \"jp2\",\n  \"jps\",\n  \"lbm\",\n  \"max\",\n  \"miff\",\n  \"mng\",\n  \"msp\",\n  \"nitf\",\n  \"ota\",\n  \"pbm\",\n  \"pc1\",\n  \"pc2\",\n  \"pc3\",\n  \"pcf\",\n  \"pcx\",\n  \"pdn\",\n  \"pgm\",\n  \"PI1\",\n  \"PI2\",\n  \"PI3\",\n  \"pict\",\n  \"pct\",\n  \"pnm\",\n  \"pns\",\n  \"ppm\",\n  \"psb\",\n  \"psd\",\n  \"pdd\",\n  \"psp\",\n  \"px\",\n  \"pxm\",\n  \"pxr\",\n  \"qfx\",\n  \"raw\",\n  \"rle\",\n  \"sct\",\n  \"sgi\",\n  \"rgb\",\n  \"int\",\n  \"bw\",\n  \"tga\",\n  \"tiff\",\n  \"tif\",\n  \"vtf\",\n  \"xbm\",\n  \"xcf\",\n  \"xpm\",\n  \"3dv\",\n  \"amf\",\n  \"ai\",\n  \"awg\",\n  \"cgm\",\n  \"cdr\",\n  \"cmx\",\n  \"dxf\",\n  \"e2d\",\n  \"egt\",\n  \"eps\",\n  \"fs\",\n  \"gbr\",\n  \"odg\",\n  \"svg\",\n  \"stl\",\n  \"vrml\",\n  \"x3d\",\n  \"sxd\",\n  \"v2d\",\n  \"vnd\",\n  \"wmf\",\n  \"emf\",\n  \"art\",\n  \"xar\",\n  \"png\",\n  \"webp\",\n  \"jxr\",\n  \"hdp\",\n  \"wdp\",\n  \"cur\",\n  \"ecw\",\n  \"iff\",\n  \"lbm\",\n  \"liff\",\n  \"nrrd\",\n  \"pam\",\n  \"pcx\",\n  \"pgf\",\n  \"sgi\",\n  \"rgb\",\n  \"rgba\",\n  \"bw\",\n  \"int\",\n  \"inta\",\n  \"sid\",\n  \"ras\",\n  \"sun\",\n  \"tga\",\n];\n","import React, { Fragment, ReactNode } from \"react\";\n\nexport const Show = (props: {\n  when: any | undefined | null;\n  children: ReactNode;\n}) => {\n  const { when, children } = props;\n  if (!Boolean(when)) {\n    return null;\n  }\n  return <Fragment>{children}</Fragment>;\n};\n","import React, { useState } from \"react\";\nimport { RenderElementProps } from \"slate-react\";\nimport { useFocused } from \"./Focused\";\nimport { Show } from \"./show\";\nimport { useChief } from \"./chief/hooks/use-chief\";\n\nexport function ElementWrapper(\n  props: RenderElementProps & {\n    attentionChildren?: React.ReactNode;\n    style?: React.CSSProperties;\n  }\n) {\n  const {\n    children,\n    element,\n    attentionChildren,\n    style,\n    attributes,\n    ...otherProps\n  } = props;\n  const { isFocusedWithin } = useFocused(element);\n  const [inside, setInside] = useState(false);\n  const { readOnly } = useChief();\n  const handleEnter = () => {\n    !readOnly && setInside(true);\n  };\n  const handleLeave = () => {\n    setInside(false);\n  };\n  return (\n    <div\n      data-slate-zero-width=\"z\"\n      onMouseEnter={handleEnter}\n      onMouseLeave={handleLeave}\n      style={{ position: \"relative\" }}\n      {...otherProps}\n    >\n      <Show when={!readOnly && (isFocusedWithin || inside)}>\n        <div style={{ position: \"absolute\", zIndex: 2, ...style }}>\n          {attentionChildren}\n        </div>\n      </Show>\n      {children}\n    </div>\n  );\n}\n","import { Node, Path } from \"slate\";\nimport { ReactEditor, useSlate } from \"slate-react\";\nimport { useState, useEffect } from \"react\";\n\nexport const useFocused = (node?: Node) => {\n  const editor = useSlate();\n  const { selection } = editor;\n  const [focus, setFocus] = useState({\n    isFocused: false,\n    isFocusedWithin: false\n  });\n  useEffect(() => {\n    if (!node) {\n      return;\n    }\n    const path = ReactEditor.findPath(editor, node);\n    let isFocused = false;\n    let isFocusedWithin = false;\n    if (selection) {\n      const { focus } = selection;\n      isFocusedWithin = Path.isDescendant(focus.path, path);\n      isFocused = Path.equals(focus.path, path);\n    }\n    setFocus({ isFocused, isFocusedWithin });\n  }, [node, selection]);\n\n  return focus;\n};\n","import styled from \"styled-components\";\nexport const ToolsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n","import styled from \"styled-components\";\nimport { OverrideTheme } from \"./override-theme\";\nimport { UiWrap } from \"./ui/ui-wrap\";\n\nexport const StyledToolBase = styled(UiWrap)`\n  overflow: hidden;\n  border-radius: 3px;\n  box-shadow: rgba(15, 15, 15, 0.05) 0px 0px 0px 1px,\n    rgba(15, 15, 15, 0.1) 0px 3px 6px, rgba(15, 15, 15, 0.2) 0px 9px 24px;\n`;\n\nexport const StyledToolBox = styled(StyledToolBase)`\n  background-color: white;\n  ${props => OverrideTheme(\"StyledToolBox\", props)}\n`;\n","import styled from \"styled-components\";\nimport { StyledToolBase } from \"../StyledToolBox\";\nimport { ButtonBase } from \"./button-base\";\n\nexport const StyledFocusToolBtn = styled(ButtonBase)`\n  background-color: rgba(47, 47, 47, 0.67);\n  &:hover {\n    background-color: rgba(67, 67, 67, 0.67);\n  }\n  color: white;\n  border: none;\n  &:first-child {\n    border-top-left-radius: 3px;\n    border-bottom-left-radius: 3px;\n  }\n  &:last-child {\n    border-top-right-radius: 3px;\n    border-bottom-right-radius: 3px;\n  }\n  padding: 4px 8px;\n  margin: 0 1px;\n`;\n\nexport const StyledFocusToolbar = styled(StyledToolBase)`\n  background-color: transparent;\n`;\n","import React from \"react\";\nimport { RenderElementProps } from \"slate-react\";\nimport { ElementWrapper } from \"../element-wrapper\";\nimport { ToolsWrapper } from \"../ToolsWrapper\";\nimport { StyledFocusToolbar } from \"./StyledFocusToolbar\";\n\nexport function WithAttentionToolbar(\n  props: RenderElementProps & {\n    children: React.ReactNode;\n    btns: React.ReactNode;\n  }\n) {\n  const { btns, children, ...renderElementProps } = props;\n  return (\n    <ElementWrapper\n      {...renderElementProps}\n      attentionChildren={\n        <StyledFocusToolbar>\n          <ToolsWrapper>{btns}</ToolsWrapper>\n        </StyledFocusToolbar>\n      }\n      style={{ right: 0, marginTop: 5, marginRight: 5 }}\n    >\n      {children}\n    </ElementWrapper>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const Input = styled.input.attrs(props => ({}))`\n  &:focus {\n    outline: 0;\n  }\n  font-size: inherit;\n  line-height: inherit;\n  border: none;\n  background: none;\n  width: 100%;\n  display: block;\n  resize: none;\n  padding: 0px;\n`;\n\nexport const InputWrapper = styled.div.attrs(props => ({\n  \"data-slate-editor\": true\n}))`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  font-size: 14px;\n  line-height: 20px;\n  padding: 4px 10px;\n  position: relative;\n  border-radius: 3px;\n  box-shadow: rgba(15, 15, 15, 0.1) 0px 0px 0px 1px inset,\n    rgba(15, 15, 15, 0.1) 0px 1px 1px inset;\n  background: rgba(242, 241, 238, 0.6);\n  cursor: text;\n  flex-grow: 1;\n  flex-shrink: 1;\n  margin-right: 8px;\n  ${Input} {\n  }\n`;\n","import styled from \"styled-components\";\nimport { ButtonBase } from \"./button-base\";\n\nexport const Button = styled(ButtonBase)`\n  background-color: ${props => props.theme.colors.primary};\n  :hover  {\n    filter: brightness(85%);\n  }\n  :active  {\n    filter: brightness(75%);\n  }\n  :disabled {\n    background-color: ${props => props.theme.colors.gray[400]};\n    color: ${props => props.theme.colors.gray[500]};\n  }\n  color: white;\n  border-radius: 0;\n  border: none;\n  padding: 4px 8px;\n`;\n","import React, { useState, useRef } from \"react\";\nimport { Popper, Manager, Reference } from \"react-popper\";\nimport { useOnClickOutside } from \"./utils\";\nimport { useOnKeyDown } from \"./chief\";\n\nexport function ToolBtnPopup(props: {\n  shortcut?: string;\n  renderContent: (setShow: (show: boolean) => void) => React.ReactNode;\n  renderToolBtn: (\n    props: {\n      ref: React.Ref<any>;\n      onMouseDown: (e: React.MouseEvent) => void;\n    },\n    show: boolean\n  ) => React.ReactNode;\n}) {\n  const [show, setShow] = useState(false);\n  const toolWindow = useRef(null);\n  useOnClickOutside(toolWindow, e => {\n    if (!e.defaultPrevented) {\n      setShow(false);\n    }\n    e.preventDefault();\n  });\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 27) {\n      setShow(false);\n    }\n  };\n  useOnKeyDown({\n    pattern: props.shortcut,\n    handler: () => setShow(!show)\n  });\n  return (\n    <Manager>\n      <Reference>\n        {({ ref }) =>\n          props.renderToolBtn(\n            {\n              ref,\n              onMouseDown: e => {\n                e.preventDefault();\n                setShow(!show);\n              }\n            },\n            show\n          )\n        }\n      </Reference>\n      <Popper\n        placement=\"bottom-start\"\n        modifiers={[\n          {\n            name: \"offset\",\n            options: {\n              offset: [-100, 10]\n            }\n          }\n        ]}\n      >\n        {({ ref, style, placement, arrowProps }) => (\n          <div ref={ref} style={style} data-placement={placement}>\n            {show && (\n              <div onKeyDown={handleKeyDown} ref={toolWindow}>\n                {props.renderContent(setShow)}\n              </div>\n            )}\n            <div ref={arrowProps.ref} style={arrowProps.style} />\n          </div>\n        )}\n      </Popper>\n    </Manager>\n  );\n}\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Transforms } from \"slate\";\nimport { useFocused, useSelected, ReactEditor, useSlate } from \"slate-react\";\nimport { WithAttentionToolbar } from \"../../ui/WithAttentionToolbar\";\nimport { Input, InputWrapper } from \"../../InputWrapper\";\nimport isUrl from \"is-url\";\nimport { ImageElement } from \"./index\";\nimport { Button } from \"../../ui/button\";\nimport styled from \"styled-components\";\nimport { ToolBtnPopup } from \"../../ToolBtnPopup\";\nimport { StyledToolBox } from \"../../StyledToolBox\";\nimport { ToolbarBtn } from \"../../ToolbarBtn\";\nimport { StyledFocusToolBtn } from \"../../ui/StyledFocusToolbar\";\nimport { ChiefRenderElementProps } from \"../../chief/chief\";\nimport { UiWrap } from \"../../ui/ui-wrap\";\nimport ReactResizeDetector from \"react-resize-detector/lib/\";\nimport { useChief } from \"../../chief/hooks/use-chief\";\n\nexport const ImageBlock = (\n  props: ChiefRenderElementProps<ImageElement> & {\n    onOpenFileRequest?: () => void;\n    onRemoved?: (url: string | null) => void;\n  }\n) => {\n  const focused = useFocused();\n  const selected = useSelected();\n  const editor = useSlate();\n  const { readOnly } = useChief();\n  const { onOpenFileRequest, onRemoved, ...renderElementProps } = props;\n  const { element, children, attributes } = renderElementProps;\n\n  const [embedUrl, setEmbedUrl] = useState(element.url || \"\");\n  const [isReplacing, setIsReplacing] = useState(false);\n\n  const handleSubmitEmbed = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (embedUrl.length > 0) {\n        Transforms.setNodes(\n          editor,\n          {\n            url: embedUrl,\n            align: \"center\"\n          },\n          {\n            at: ReactEditor.findPath(editor, element)\n          }\n        );\n        if (isReplacing) {\n          setIsReplacing(false);\n        }\n      }\n    },\n    [embedUrl, isReplacing]\n  );\n\n  useEffect(() => {\n    if (element.url && isReplacing) {\n      setIsReplacing(false);\n    }\n  }, [element.url]);\n\n  const handleDelete = useCallback(() => {\n    onRemoved && onRemoved(element.url);\n    Transforms.delete(editor, { at: ReactEditor.findPath(editor, element) });\n  }, [element]);\n\n  const handleUpload = useCallback(() => {\n    onOpenFileRequest && onOpenFileRequest();\n  }, [onOpenFileRequest]);\n\n  const handleResize = useCallback((w, h) => {\n    Transforms.setNodes(\n      editor,\n      {\n        width: w,\n        height: h\n      },\n      {\n        at: ReactEditor.findPath(editor, element)\n      }\n    );\n  }, []);\n\n  const align = useCallback((align: ImageElement[\"align\"]) => {\n    Transforms.setNodes(\n      editor,\n      {\n        align\n      },\n      {\n        at: ReactEditor.findPath(editor, element)\n      }\n    );\n  }, []);\n\n  const toggleReplace = useCallback(() => {\n    setIsReplacing(!isReplacing);\n  }, [isReplacing]);\n\n  const handleClick = () => {\n    Transforms.select(editor, ReactEditor.findPath(editor, element));\n  };\n\n  let imageHandler = null;\n\n  if (!isReplacing && element.url) {\n    const src = element.url || \"\";\n    imageHandler = (\n      <WithAttentionToolbar\n        {...renderElementProps}\n        btns={\n          <React.Fragment>\n            <StyledFocusToolBtn onMouseDown={handleDelete}>\n              Delete\n            </StyledFocusToolBtn>\n            <ToolBtnPopup\n              renderContent={() => (\n                <StyledToolBox>\n                  {/* <ToolbarBtn>Copy address</ToolbarBtn> */}\n                  {/* <ToolbarBtn>Resize</ToolbarBtn> */}\n                  <ToolbarBtn onMouseDown={toggleReplace}>Replace</ToolbarBtn>\n                  <ToolbarBtn onMouseDown={() => align(\"left\")}>\n                    Align left\n                  </ToolbarBtn>\n                  <ToolbarBtn onMouseDown={() => align(\"center\")}>\n                    Align center\n                  </ToolbarBtn>\n                  <ToolbarBtn onMouseDown={() => align(\"right\")}>\n                    Align right\n                  </ToolbarBtn>\n                </StyledToolBox>\n              )}\n              renderToolBtn={tprops => (\n                <StyledFocusToolBtn {...tprops}>...</StyledFocusToolBtn>\n              )}\n            ></ToolBtnPopup>\n          </React.Fragment>\n        }\n      >\n        <div\n          style={{\n            position: \"relative\",\n            height: element.height,\n            display: \"flex\",\n            justifyContent:\n              props.element.align === \"center\"\n                ? \"center\"\n                : props.element.align === \"left\"\n                ? \"flex-start\"\n                : \"flex-end\"\n          }}\n          contentEditable={false}\n          onClick={handleClick}\n        >\n          <ReactResizeDetector\n            onResize={(w: number, h: number) => handleResize(w, h)}\n          >\n            <div\n              style={{\n                resize: readOnly ? \"none\" : \"both\",\n                overflow: \"auto\",\n                width: element.width,\n                height: element.height\n              }}\n            >\n              <img\n                draggable={false}\n                style={{\n                  objectFit: \"fill\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  display: \"block\"\n                }}\n                alt={element.caption}\n                src={src}\n              />\n            </div>\n          </ReactResizeDetector>\n        </div>\n        {children}\n      </WithAttentionToolbar>\n    );\n  } else {\n    imageHandler = (\n      <WithAttentionToolbar\n        {...renderElementProps}\n        btns={\n          <React.Fragment>\n            <StyledFocusToolBtn onMouseDown={handleDelete}>\n              Delete\n            </StyledFocusToolBtn>\n            {isReplacing && (\n              <StyledFocusToolBtn onMouseDown={toggleReplace}>\n                Cancel\n              </StyledFocusToolBtn>\n            )}\n          </React.Fragment>\n        }\n      >\n        <div contentEditable={false}>\n          <StyledImageEmptyContainer>\n            <h2>Insert image</h2>\n            <Button onMouseDown={handleUpload}>Upload</Button>\n            <p>Or paste a link</p>\n            <form onSubmit={handleSubmitEmbed} data-slate-editor>\n              <InputWrapper style={{ width: \"50%\" }}>\n                <Input\n                  value={embedUrl}\n                  onChange={e => setEmbedUrl(e.target.value)}\n                  placeholder=\"Paste link\"\n                ></Input>\n              </InputWrapper>\n              <br />\n              <Button disabled={embedUrl.length === 0 || !isUrl(embedUrl)}>\n                Embed\n              </Button>\n            </form>\n            {children}\n          </StyledImageEmptyContainer>\n        </div>\n      </WithAttentionToolbar>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        outline: focused && selected ? \"1px solid rgb(46, 170, 220)\" : \"none\"\n      }}\n      {...attributes}\n      contentEditable={false}\n    >\n      {imageHandler}\n    </div>\n  );\n};\n\nexport const StyledImageEmptyContainer = styled(UiWrap)`\n  background-color: ${props => props.theme.colors.gray[300]};\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  form {\n    width: 70%;\n    display: flex;\n    flex: 1;\n    justify-content: center;\n    align-items: center;\n  }\n  h2,\n  p {\n    color: ${props => props.theme.colors.gray[600]};\n    user-select: none;\n  }\n`;\n","import {} from \"./image-element\";\nimport React, { useRef, useEffect, ReactNode } from \"react\";\nimport { AddonProps } from \"../../addon\";\nimport { Editor, Transforms } from \"slate\";\nimport { ReactEditor, useSlate } from \"slate-react\";\nimport { isNodeActive, getNodeFromSelection, findNodes } from \"../../utils\";\nimport { RichEditor } from \"../../chief/editor\";\nimport { FileUpload } from \"../../FileUpload\";\nimport { ToolbarBtn } from \"../../ToolbarBtn\";\nimport { ChiefElement, isChiefElement } from \"../../chief/chief\";\nimport { useRenderElement } from \"../../chief/hooks/use-render-element\";\nimport { usePlugin } from \"../../chief/hooks/use-plugin\";\nimport { isDefined, isFilled } from \"ts-is-present\";\nimport { HistoryEditor } from \"slate-history\";\nimport isUrl from \"is-url\";\nimport { ImageExtensions } from \"./ImageExtensions\";\nimport { ImageBlock } from \"./image-element\";\nimport { iPresenter } from \"../../chief\";\nimport { useControl } from \"../../chief/controls\";\n\nexport interface ImageElement extends ChiefElement {\n  type: \"image\";\n  url: string | null;\n  caption?: string;\n  previewId?: number;\n  width: number;\n  height: number;\n  align: \"left\" | \"center\" | \"right\";\n}\n\nexport function isImageElement(element: unknown): element is ImageElement {\n  return isChiefElement(element) && element.type === \"image\";\n}\n\nexport function ImageControl(props: { children: ReactNode }) {\n  useControl({\n    category: \"image\",\n    render: editor => (\n      <ToolbarBtn\n        tooltip={{\n          label: {\n            key: `elements.image`,\n            defaultLabel: \"Image\"\n          }\n        }}\n        isActive={isNodeActive(editor, \"image\")}\n        onClick={() => {\n          RichEditor.insertBlock(editor, \"image\");\n          ReactEditor.focus(editor);\n        }}\n      >\n        {props.children}\n      </ToolbarBtn>\n    )\n  });\n  return null;\n}\n\nexport const isImageUrl = (url: string, extensions = ImageExtensions) => {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split(\".\").pop() as string;\n  return extensions.includes(ext);\n};\n\nconst insertImage = (editor: ReactEditor, url: string) => {\n  const image = { type: \"image\", url, children: [{ text: \"\" }] };\n  Transforms.insertNodes(editor, image);\n};\n\nfunction getAllImageNodes(editor: Editor) {\n  const [...images] = findNodes(editor, n => n.type === \"image\");\n  return images.map(([node]) => node) as ImageElement[];\n}\n\nconst Presenter: iPresenter<ImageElement> = {\n  element: {\n    typeMatch: \"image\",\n    renderElement: props => (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent:\n            props.element.align === \"center\"\n              ? \"center\"\n              : props.element.align === \"left\"\n              ? \"flex-start\"\n              : \"flex-end\"\n        }}\n      >\n        <img\n          style={{\n            objectFit: \"fill\",\n            width: props.element.width,\n            height: props.element.height,\n            display: \"block\"\n          }}\n          alt={props.element.caption}\n          src={props.element?.url ? props.element.url : \"\"}\n        />\n      </div>\n    )\n  }\n};\n\nexport function ImageAddon(\n  props: AddonProps & {\n    onUploadRequest?: (files: globalThis.FileList | null) => Promise<string>;\n    onRemoved?: (url: string | null) => void;\n    onChange?: (images: ImageElement[]) => void;\n  }\n) {\n  const editor = useSlate();\n  const fileRef = useRef<HTMLInputElement>(null);\n\n  usePlugin({\n    isVoid: isVoid => element =>\n      isImageElement(element) && element.type === \"image\"\n        ? true\n        : isVoid(element),\n    insertData: (insertData, editor) => data => {\n      const { files } = data;\n      if (files && files.length > 0) {\n        for (const file of Array.from(files)) {\n          const reader = new FileReader();\n          const [mime] = file.type.split(\"/\");\n          if (mime === \"image\") {\n            reader.addEventListener(\"load\", () => {\n              const url = reader.result as string;\n              insertImage(editor, url);\n            });\n            reader.readAsDataURL(file);\n          }\n        }\n      } else {\n        insertData(data);\n      }\n    }\n  });\n\n  const onPreview = (dataUrl: FileReader[\"result\"]) => {\n    if (typeof dataUrl === \"string\") {\n      if (HistoryEditor.isHistoryEditor(editor)) {\n        HistoryEditor.withoutSaving(editor, () => {\n          Transforms.setNodes(editor, {\n            url: dataUrl\n          });\n        });\n      }\n    }\n  };\n\n  const handleFile = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!editor.selection) {\n      return;\n    }\n    const imageRef = Editor.rangeRef(editor, editor.selection);\n    const onUploadedSuccess = (url: string) => {\n      if (!imageRef.current) return;\n      const node = getNodeFromSelection(editor, imageRef.current);\n      if (node && isImageElement(node)) {\n        Transforms.setNodes(\n          editor,\n          {\n            url,\n            align: \"center\"\n          },\n          { at: imageRef.current! }\n        );\n        imageRef.unref();\n      }\n    };\n\n    const onUploadedFailed = () => {\n      if (!imageRef.current) return;\n      Transforms.setNodes(\n        editor,\n        {\n          // url: null,\n          error: \"failedupload\"\n        },\n        { at: imageRef.current }\n      );\n      imageRef.unref();\n    };\n\n    const files = e.target.files;\n    if (!files) {\n      return;\n    }\n    if (files.length > 0) {\n      const file = files[0];\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => onPreview(reader.result));\n      reader.readAsDataURL(file);\n      if (props.onUploadRequest) {\n        try {\n          const url = await props.onUploadRequest(files);\n          onUploadedSuccess(url);\n        } catch (err) {\n          onUploadedFailed();\n        }\n      }\n    }\n  };\n\n  let imageUrls: ImageElement[] = [];\n  if (props.onChange) {\n    imageUrls = getAllImageNodes(editor)\n      .map(it => it)\n      .filter(isDefined)\n      .filter(isFilled);\n  }\n\n  useEffect(() => {\n    props.onChange && props.onChange(imageUrls);\n  }, [JSON.stringify(imageUrls), props.onChange]);\n\n  useRenderElement<ImageElement>(\n    {\n      typeMatch: \"image\",\n      renderElement: renderElementProps => (\n        <ImageBlock\n          onOpenFileRequest={() => fileRef.current && fileRef.current.click()}\n          onRemoved={props.onRemoved}\n          {...renderElementProps}\n        />\n      )\n    },\n    [props.onRemoved]\n  );\n\n  return (\n    <FileUpload\n      accept={\"image/*\"}\n      ref={fileRef}\n      onChange={handleFile}\n      multiple={false}\n    />\n  );\n}\n\nImageAddon.Presenter = Presenter;\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  ReactNode\n} from \"react\";\nimport { useSlate, useEditor } from \"slate-react\";\nimport { Element, Editor, Transforms, Range, Node } from \"slate\";\nimport { AddonProps } from \"../../addon\";\nimport isUrl from \"is-url\";\nimport { useControl } from \"../../chief/controls\";\nimport { ToolBtnPopup } from \"../../ToolBtnPopup\";\nimport { useOnClickOutside } from \"../../utils\";\nimport { StyledToolBox } from \"../../StyledToolBox\";\nimport { InputWrapper, Input } from \"../../InputWrapper\";\nimport { ToolbarBtn } from \"../../ToolbarBtn\";\nimport { useRenderElement } from \"../../chief/hooks/use-render-element\";\nimport { usePlugin } from \"../../chief/hooks/use-plugin\";\nimport { useLabels } from \"../../chief/hooks/use-labels\";\nimport { ChiefElement } from \"../../chief\";\nimport { shortcutText } from \"../../shortcut\";\nimport { iPresenter } from \"../../chief/chief-presentation\";\nimport { ElementHoverTip } from \"../../element-hover-tip\";\nimport { useSaveSelection } from \"../../chief/utils/saved-selection\";\n\nexport const isLinkELement = (element: Element) => {\n  return element.type === \"link\" && typeof element.url === \"string\";\n};\n\nexport function LinkAddon(props: AddonProps) {\n  useLabels(props.labels);\n  usePlugin({\n    insertText: (insertText, editor) => text => {\n      if (text && isUrl(text)) {\n        wrapLink(editor, text);\n      } else {\n        insertText(text);\n      }\n    },\n    insertData: (insertData, editor) => data => {\n      const text = data.getData(\"text/plain\");\n      if (text && isUrl(text)) {\n        wrapLink(editor, text);\n      } else {\n        insertData(data);\n      }\n    },\n    isInline: isInline => element => {\n      // console.log(\"isInline, link\");\n      return isLinkELement(element) ? true : isInline(element);\n    }\n  });\n\n  useRenderElement<{ url: string } & ChiefElement>({\n    typeMatch: \"link\",\n    renderElement: props => (\n      <ElementHoverTip\n        delayed\n        placement=\"bottom\"\n        tip={\n          <span>\n            <a target=\"_blank\" href={props.element.url}>\n              {props.element.url}\n            </a>\n          </span>\n        }\n      >\n        {triggerRef => (\n          <a {...props.attributes} href={props.element.url}>\n            <span ref={triggerRef}>{props.children}</span>\n          </a>\n        )}\n      </ElementHoverTip>\n    )\n  });\n  return null;\n}\n\nexport function LinkControl(props: { children: ReactNode }) {\n  return useControl({\n    category: \"link\",\n    Component: () => {\n      {\n        const editor = useEditor();\n        const isActive = isLinkActive(editor);\n        return (\n          <ToolBtnPopup\n            shortcut={\"mod+k\"}\n            renderContent={setShow => (\n              <StyledToolBox>\n                <LinkPopup onClose={() => setShow(false)}></LinkPopup>\n              </StyledToolBox>\n            )}\n            renderToolBtn={(tprops, show) => (\n              <ToolbarBtn\n                tooltip={{\n                  label: {\n                    key: \"elements.link\",\n                    defaultLabel: \"Add link\"\n                  },\n                  shortcut: shortcutText(\"mod+k\")\n                }}\n                {...tprops}\n                isActive={isActive || show}\n              >\n                {props.children}\n              </ToolbarBtn>\n            )}\n          />\n        );\n      }\n    }\n  });\n}\n\nconst Presenter: iPresenter<{ url: string } & ChiefElement> = {\n  element: {\n    typeMatch: \"link\",\n    renderElement: props => <a href={props.element.url}>{props.children}</a>\n  }\n};\n\nLinkAddon.Presenter = Presenter;\n\nexport const insertLink = (editor: Editor, url: string) => {\n  if (editor.selection) {\n    wrapLink(editor, url);\n  }\n};\n\nexport const isLinkActive = (editor: Editor) => {\n  const [link] = Editor.nodes(editor, { match: n => n.type === \"link\" });\n  return Boolean(link);\n};\n\nconst unwrapLink = (editor: Editor) => {\n  Transforms.unwrapNodes(editor, { match: n => n.type === \"link\" });\n};\n\nconst wrapLink = (editor: Editor, url: string) => {\n  if (isLinkActive(editor)) {\n    unwrapLink(editor);\n  }\n\n  const { selection } = editor;\n  const isCollapsed = selection && Range.isCollapsed(selection);\n  const link = {\n    type: \"link\",\n    url,\n    children: isCollapsed ? [{ text: url }] : []\n  };\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link);\n  } else {\n    Transforms.wrapNodes(editor, link, { split: true });\n    Transforms.collapse(editor, { edge: \"end\" });\n  }\n};\n\nfunction LinkPopup(props: { onClose: () => void }) {\n  const editor = useSlate();\n  const { selection } = editor;\n  const { saveSelection } = useSaveSelection();\n  useEffect(() => {\n    return saveSelection(selection);\n  }, []);\n  const linkWrapperRef = useRef<HTMLFormElement>(null);\n  useOnClickOutside(linkWrapperRef, () => {\n    props.onClose();\n  });\n  let linkNode: Node | null = null;\n  if (selection) {\n    const [_linkNode] = Editor.nodes(editor, {\n      at: selection,\n      match: n => n.type === \"link\"\n    });\n    linkNode = _linkNode && _linkNode[0];\n  }\n  const [url, setUrl] = useState(\"\");\n  useEffect(() => {\n    if (linkNode && typeof linkNode.url === \"string\") {\n      setUrl(linkNode.url);\n    }\n  }, [linkNode]);\n  const handleInsertLink = useCallback(() => {\n    if (url.length > 0) {\n      insertLink(editor, url);\n      props.onClose();\n    } else if (\n      linkNode &&\n      typeof linkNode.url === \"string\" &&\n      linkNode.url.length > 0\n    ) {\n      unwrapLink(editor);\n      props.onClose();\n    }\n  }, [url]);\n\n  const handleUnlink = useCallback(() => {\n    unwrapLink(editor);\n    props.onClose();\n  }, [url]);\n\n  const [getLabel] = useLabels();\n\n  return (\n    <form ref={linkWrapperRef} onSubmit={handleInsertLink}>\n      <div\n        style={{\n          padding: 9,\n          display: \"flex\",\n          minWidth: 400,\n          flexDirection: \"row\"\n        }}\n      >\n        <InputWrapper>\n          <Input\n            value={url}\n            onChange={(e: React.FormEvent<HTMLInputElement>) =>\n              setUrl(e.currentTarget.value)\n            }\n            placeholder={getLabel({\n              key: \"elements.link.placeholder\",\n              defaultLabel: \"Paste or type your link here\"\n            })}\n            autoFocus\n          />\n        </InputWrapper>\n        <ToolbarBtn\n          rounded\n          disabled={url.length === 0}\n          onMouseDown={handleInsertLink}\n        >\n          {getLabel({\n            key: \"elements.link.btn.link\",\n            defaultLabel: \"Link\"\n          })}\n        </ToolbarBtn>\n        <ToolbarBtn\n          rounded\n          disabled={\n            !isLinkActive(editor)\n            // || (linkNode &&\n            //   typeof linkNode.url === \"string\" &&\n            //   linkNode.url.length > 0)\n          }\n          onMouseDown={handleUnlink}\n        >\n          {getLabel({\n            key: \"elements.link.btn.unlink\",\n            defaultLabel: \"Unlink\"\n          })}\n        </ToolbarBtn>\n      </div>\n    </form>\n  );\n}\n","import { Editor, Transforms, Node } from \"slate\";\n\nexport const toggleElement = (editor: Editor, type: string) => {\n  const isActive = isElementActive(editor, type);\n  const { selection } = editor;\n  if (!selection) {\n    return;\n  }\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : type,\n    autoFocus: true,\n    at: selection.focus\n  });\n};\n\nexport const isElementActive = (editor: Editor, type: string) => {\n  const { selection } = editor;\n  if (!selection) {\n    return false;\n  }\n  const [match] = Editor.nodes(editor, {\n    at: selection,\n    match: n => n.type === type\n  });\n  return !!match;\n};\n\nexport const isElementEmpty = (editor: Editor) => {\n  const { selection } = editor;\n\n  if (selection) {\n    const [node] = Editor.parent(editor, selection.focus);\n    return Node.string(node).length === 0;\n  }\n  return false;\n};\n","import { ReactEditor } from \"slate-react\";\nimport { isElementActive } from \"../../element-utils\";\nimport { Transforms, Editor } from \"slate\";\nimport { TYPE_LIST_ITEM } from \".\";\n\nexport const toggleList = (editor: ReactEditor, type: string) => {\n  const isActive = isElementActive(editor, type);\n  Transforms.unwrapNodes(editor, {\n    match: n => n.type === type,\n    split: true\n  });\n  Editor.withoutNormalizing(editor, () => {\n    Transforms.setNodes(editor, {\n      type: isActive ? \"paragraph\" : TYPE_LIST_ITEM\n    });\n\n    if (!isActive) {\n      const list = {\n        type,\n        children: []\n      };\n      Transforms.wrapNodes(editor, list);\n    }\n  });\n};\n","import React from \"react\";\nimport { RenderElementProps } from \"slate-react\";\n\nexport const renderElement = (\n  props: RenderElementProps,\n  elementType: string,\n  reactType: Parameters<typeof React.createElement>[\"0\"],\n  addionalProps?: any\n) => {\n  const { children, attributes, element } = props;\n  if (element.type === elementType) {\n    return React.createElement(\n      reactType,\n      { ...attributes, ...addionalProps },\n      children\n    );\n  }\n  return undefined;\n};\n","import { ReactEditor, useSlate } from \"slate-react\";\nimport { Point, Editor, Range, Node } from \"slate\";\nimport { ChiefElement, isChiefElement } from \"./chief\";\n\ninterface ChiefState {\n  editor: ReactEditor;\n  element?: ChiefElement | Editor | undefined;\n  elementType?: string;\n  point?: Point;\n  isElementEmpty: boolean;\n  selection?: Range | null;\n  isSelectionCollapsed: boolean;\n  isSelectionExpanded: boolean;\n}\n\nexport function getState(editor: ReactEditor): ChiefState {\n  const { selection } = editor;\n  const point = selection ? selection.focus : undefined;\n  const [element] = point ? Editor.parent(editor, point) : [];\n\n  let isSelectionExpanded = false;\n  let isSelectionCollapsed = true;\n  if (selection) {\n    isSelectionExpanded = Range.isExpanded(selection);\n    isSelectionCollapsed = Range.isCollapsed(selection);\n  }\n\n  let isElementEmpty = true;\n\n  if (element) {\n    isElementEmpty = Node.string(element).length == 0;\n  }\n  let elementType: string | undefined = undefined;\n\n  if (element && isChiefElement(element)) {\n    elementType = element.type;\n  }\n\n  return {\n    editor,\n    // TODO:: THIS\n    // @ts-ignore\n    element,\n    elementType,\n    point,\n    selection,\n    isElementEmpty,\n    isSelectionExpanded,\n    isSelectionCollapsed\n  };\n}\n","import { toggleList } from \"./transforms\";\nimport { ChiefElement, InjectedRenderElement } from \"../../chief/chief\";\nimport { useRenderElement } from \"../../chief/hooks/use-render-element\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\nimport { usePlugin } from \"../../chief/hooks/use-plugin\";\nimport { renderElement } from \"../../element-renderer\";\nimport { Editor, Transforms, Element, Range } from \"slate\";\nimport { ReactEditor } from \"slate-react\";\nimport { isElementEmpty } from \"../../element-utils\";\nimport { getState } from \"../../chief/chief-state\";\nimport { getAncestor, getActiveNode } from \"../../utils\";\nimport { AddonProps } from \"../../addon\";\nimport styled from \"styled-components\";\nimport { iPresenter } from \"../../chief\";\n\nexport const TYPE_LIST_ITEM = \"list-item\";\nexport const TYPE_UNORDERED_LIST = \"unordered-list\";\nexport const TYPE_ORDERED_LIST = \"ordered-list\";\nexport const LIST_TYPES = [\n  TYPE_LIST_ITEM,\n  TYPE_UNORDERED_LIST,\n  TYPE_ORDERED_LIST\n];\n\ntype ListElement = {} & ChiefElement;\n\nconst Ul = styled.ul`\n  margin: 0;\n  padding-inline-start: 25px;\n  ul ul ul ul,\n  ul {\n    list-style: square outside none;\n  }\n\n  ul ul ul ul ul,\n  ul ul {\n    list-style: circle outside none;\n  }\n\n  ul ul ul ul ul ul,\n  ul ul ul {\n    list-style: disc outside none;\n  }\n`;\nconst Ol = styled.ol`\n  margin: 0;\n  padding-inline-start: 25px;\n  ol ol ol ol,\n  ol {\n    list-style: decimal outside none;\n  }\n  ol ol ol ol ol,\n  ol ol {\n    list-style: lower-latin outside none;\n  }\n  ol ol ol ol ol ol,\n  ol ol ol {\n    list-style: lower-roman outside none;\n  }\n`;\n\nconst Li = styled.li``;\n\nconst _renderElement: InjectedRenderElement = {\n  typeMatch: LIST_TYPES,\n  renderElement: props => {\n    switch (props.element.type) {\n      case TYPE_UNORDERED_LIST:\n        return renderElement(props, props.element.type, Ul);\n      case TYPE_ORDERED_LIST:\n        return renderElement(props, props.element.type, Ol);\n      default:\n        return renderElement(props, TYPE_LIST_ITEM, Li);\n    }\n  }\n};\n\nconst Presenter: iPresenter = {\n  element: _renderElement\n};\n\nexport function ListsAddon(props: AddonProps) {\n  usePlugin({\n    normalizeNode: (normalizeNode, editor) => ([node, path]) => {\n      if (node.type === TYPE_LIST_ITEM) {\n        const [parent] = Editor.parent(editor, path);\n        if (\n          parent &&\n          ![TYPE_ORDERED_LIST, TYPE_UNORDERED_LIST].includes(\n            parent.type as string\n          )\n        ) {\n          Transforms.setNodes(editor, { type: \"paragraph\" }, { at: path });\n        }\n      }\n      return normalizeNode([node, path]);\n    }\n  });\n\n  useRenderElement<ListElement>(_renderElement);\n\n  useOnKeyDown({\n    pattern: \"enter\",\n    handler: (e, editor) => {\n      const { elementType, element } = getState(editor);\n      if (elementType !== TYPE_LIST_ITEM) {\n        return false;\n      }\n      let ancestor = getAncestor(editor, element as Element, 1);\n\n      if (\n        !ancestor ||\n        ![TYPE_ORDERED_LIST, TYPE_UNORDERED_LIST].includes(\n          ancestor!.type as string\n        )\n      ) {\n        return false;\n      }\n      e.preventDefault();\n      if (!isElementEmpty(editor)) {\n        Editor.withoutNormalizing(editor, () => {\n          Transforms.insertNodes(editor, {\n            type: TYPE_LIST_ITEM,\n            children: [{ text: \"\" }]\n          });\n        });\n      } else {\n        const active = getActiveNode(editor);\n        if (!active) {\n          return false;\n        }\n        const list = getAncestor(editor, active, 1) as Element;\n        const listParent = getAncestor(editor, active, 2);\n\n        if (listParent && listParent.children[0].type === TYPE_LIST_ITEM) {\n          //2. If nested then unwrap and move left\n          Transforms.unwrapNodes(editor, {\n            match: n => n.type === list.type,\n            split: true\n          });\n        } else {\n          //3. At top level so cannot unwrap, insert new paragraph and break from list\n          toggleList(editor, list.type as string);\n        }\n      }\n\n      return true;\n    }\n  });\n  useOnKeyDown({\n    pattern: \"tab\",\n    handler: (e, editor) => {\n      const { elementType, element } = getState(editor);\n      if (!element || elementType !== TYPE_LIST_ITEM) {\n        return false;\n      }\n\n      let ancestor = getAncestor(editor, element, 1);\n      if (\n        !ancestor ||\n        ![TYPE_ORDERED_LIST, TYPE_UNORDERED_LIST].includes(\n          ancestor!.type as string\n        )\n      ) {\n        return false;\n      }\n\n      if (ancestor.children.length > 1) {\n        e.preventDefault();\n        const index = ancestor?.children.indexOf(element) - 1;\n        if (ancestor.children[index].type !== TYPE_LIST_ITEM) {\n          // 3a. tab = move right. If the node above is a list then append to it.\n          const otherList = ancestor.children[index] as Element;\n          const destination = ReactEditor.findPath(\n            editor,\n            otherList.children[otherList.children.length - 1]\n          );\n          destination[destination.length - 1]++;\n          Transforms.moveNodes(editor, {\n            to: destination\n          });\n        } else {\n          // 3b. otherwise, wrap the item in a new list and nest in parent\n          Transforms.wrapNodes(editor, { type: ancestor.type, children: [] });\n        }\n        return true;\n      }\n      return false;\n    }\n  });\n  useOnKeyDown({\n    pattern: \"shift+tab\",\n    handler: (e, editor) => {\n      const { elementType, element } = getState(editor);\n      if (!element || elementType !== TYPE_LIST_ITEM) {\n        return false;\n      }\n\n      let ancestor = getAncestor(editor, element, 1);\n      if (\n        !ancestor ||\n        ![TYPE_ORDERED_LIST, TYPE_UNORDERED_LIST].includes(\n          ancestor!.type as string\n        )\n      ) {\n        return false;\n      }\n\n      if (e.shiftKey) {\n        let ancestor = getAncestor(editor, element, 2);\n        // 1. tab+shift = move left to grandparent list if nested\n        if (ancestor?.children.find(child => child.type === TYPE_LIST_ITEM)) {\n          Transforms.liftNodes(editor);\n        } else {\n          const options = {\n            at: ReactEditor.findPath(editor, element)\n          };\n          // 2. tab+shift = unwrap and move to below parent if no grandparent list\n          if (element?.children.length == 1) {\n            Transforms.setNodes(editor, { type: \"paragraph\" }, options);\n          } else {\n            Transforms.unwrapNodes(editor, options);\n          }\n        }\n        e.preventDefault();\n        return true;\n      }\n      return false;\n    }\n  });\n  return null;\n}\n\nListsAddon.Presenter = Presenter;\n","import React from \"react\";\nimport { toggleList } from \"./transforms\";\nimport { ReactEditor, useSlate } from \"slate-react\";\nimport { isNodeActive } from \"../../utils\";\nimport { ToolbarBtn } from \"../../ToolbarBtn\";\nimport { TYPE_ORDERED_LIST, TYPE_UNORDERED_LIST } from \"./index\";\nimport { useControl } from \"../../chief/controls\";\nimport { Control } from \"../../control\";\n\nexport const createListControl = (\n  type: typeof TYPE_ORDERED_LIST | typeof TYPE_UNORDERED_LIST,\n  children?: React.ReactNode\n): Control => ({\n  category: \"lists\",\n  Component: () => {\n    const editor = useSlate();\n    return (\n      <ToolbarBtn\n        tooltip={{\n          label: {\n            key: `elements.${type}`,\n            defaultLabel: type\n          }\n        }}\n        isActive={isNodeActive(editor, type)}\n        onClick={() => {\n          toggleList(editor, type);\n          ReactEditor.focus(editor);\n        }}\n      >\n        {children || type}\n      </ToolbarBtn>\n    );\n  }\n});\n\nexport function ListControl(props: {\n  type: Parameters<typeof createListControl>[\"0\"];\n  children?: React.ReactNode;\n}) {\n  return useControl(createListControl(props.type, props.children));\n}\n","import { AddonProps } from \"../../addon\";\nimport { useOnKeyDown } from \"../../chief/hooks/use-on-key-down\";\n\nexport function BlockTabAddon(props: AddonProps) {\n  useOnKeyDown({\n    pattern: \"tab\",\n    priority: \"low\",\n    handler: e => {\n      e.preventDefault();\n      return true;\n    }\n  });\n  return null;\n}\n","import styled from \"styled-components\";\nexport const ToolDivider = styled.div`\n  width: 1px;\n  background-color: #eaeaea;\n  ${props =>\n    props.theme.preferDarkOption &&\n    `\n@media (prefers-color-scheme: dark) {\n  background-color: #737373;\n  }`}\n`;\n","import React from \"react\";\nimport groupBy from \"lodash/groupBy\";\nimport { useSlate } from \"slate-react\";\nimport { ToolDivider } from \"../../ToolDivider\";\n\nimport { useProvidedControls } from \"../../chief/controls\";\n\nexport function BlockInsertControls() {\n  const editor = useSlate();\n  const { controls } = useProvidedControls();\n  if (controls.length > 0) {\n    const groupedControls = groupBy(controls, \"category\");\n    return (\n      <React.Fragment>\n        {Object.entries(groupedControls).map(([type, groupedControls], i) => (\n          <React.Fragment key={`${type}${i}`}>\n            {groupedControls.map((control, ii) => {\n              if (control.Component) {\n                return <control.Component key={`${type}${i}${ii}`} />;\n              }\n              const renderControl = control.render;\n              return (\n                <React.Fragment key={`${type}${i}${ii}`}>\n                  {typeof renderControl === \"function\"\n                    ? renderControl(editor)\n                    : renderControl}\n                </React.Fragment>\n              );\n            })}\n            <ToolDivider />\n          </React.Fragment>\n        ))}\n      </React.Fragment>\n    );\n  }\n  return null;\n}\n","import {\n  useOnClickOutside} from \"../../utils\";\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useSlate, ReactEditor } from \"slate-react\";\nimport { Node, Editor, Path, Transforms } from \"slate\";\nimport { Manager, Reference, Popper } from \"react-popper\";\nimport styled from \"styled-components\";\nimport { ButtonBase } from \"../../ui/button-base\";\nimport { BlockInsertControls } from \"./block-insert-controls\";\nimport { ToolsWrapper } from \"../../ToolsWrapper\";\nimport { StyledToolBox } from \"../../StyledToolBox\";\nimport { useControlsProvider } from \"../../chief/controls\";\n\nexport const BlockInsertBtn = styled(ButtonBase)`\n  user-select: none;\n  border: none;\n  background: transparent;\n  display: block;\n  width: 25px;\n  height: 25px;\n  border: 1px solid #ccc;\n  border-radius: ${25 / 2}px;\n  &:before {\n    content: \"+\";\n    font-family: Arial, Helvetica, sans-serif;\n    font-weight: normal;\n    font-size: 28px;\n    color: #ccc;\n    position: absolute;\n    top: -3px;\n    left: 4px;\n    padding: 0;\n    margin: 0;\n  }\n  &:hover {\n    &:before {\n      color: #ddd;\n    }\n  }\n  &:active {\n    &:before {\n      color: #eee;\n    }\n  }\n`;\n\nfunction useHoveredNode(editor: ReactEditor) {\n  const [node, setNode] = useState<{ node: Node; path: Path } | null>(null);\n  useEffect(() => {\n    try {\n      const [rootNode] = Editor.node(editor, {\n        anchor: Editor.start(editor, []),\n        focus: Editor.end(editor, [])\n      });\n      if (rootNode && Node.isNode(rootNode)) {\n        const firstDOMPoint = ReactEditor.toDOMNode(editor, rootNode);\n        firstDOMPoint.addEventListener(\"mousemove\", e => {\n          if (ReactEditor.hasDOMNode(editor, e.target as globalThis.Node)) {\n            const node = ReactEditor.toSlateNode(\n              editor,\n              e.target as globalThis.Node\n            );\n            const path = ReactEditor.findPath(editor, node);\n            setNode({ node, path });\n          } else {\n            setNode(null);\n          }\n        });\n      }\n    } catch (err) {\n      setNode(null);\n    }\n  }, [editor]);\n  return node;\n}\n\nexport function BlockInsert(props: { children?: React.ReactNode }) {\n  const editor = useSlate();\n  const [ControlsContext, controls] = useControlsProvider();\n  const [coords, setCoords] = useState([-1000, -1000]);\n  const [showMenu, setShowMenu] = useState(false);\n  const toolboxRef = useRef<HTMLDivElement>(null);\n  useOnClickOutside(toolboxRef, () => {\n    setShowMenu(false);\n  });\n\n  const hoveredNode = useHoveredNode(editor);\n\n  const handleBlockInsert = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.preventDefault();\n      event.stopPropagation();\n      if (!showMenu && hoveredNode) {\n        Transforms.select(editor, hoveredNode.path);\n      }\n      setShowMenu(!showMenu);\n      ReactEditor.focus(editor);\n    },\n    [showMenu, hoveredNode]\n  );\n\n  useEffect(() => {\n    if (hoveredNode?.node && !showMenu) {\n      try {\n        const [rootNode] = Editor.node(editor, {\n          anchor: Editor.start(editor, []),\n          focus: Editor.end(editor, [])\n        });\n        if (rootNode && Node.isNode(rootNode)) {\n          const firstDOMPoint = ReactEditor.toDOMNode(editor, rootNode);\n          const activeDOMNode = ReactEditor.toDOMNode(editor, hoveredNode.node);\n          const rect = activeDOMNode.getBoundingClientRect();\n          const top = rect.top + window.pageYOffset + rect.height / 2 - 25 / 2;\n          const left =\n            firstDOMPoint.getBoundingClientRect().left +\n            window.pageXOffset -\n            30;\n          setCoords([top, left]);\n        }\n      } catch (err) {\n        /*ignore*/\n      }\n    }\n  }, [hoveredNode]);\n\n  if (\n    !hoveredNode ||\n    hoveredNode.path.length === 0 ||\n    Node.string(hoveredNode.node).length !== 0 ||\n    Editor.isVoid(editor, hoveredNode.node)\n  ) {\n    if (!showMenu) {\n      return null;\n    }\n  }\n  return (\n    <Manager>\n      <Reference>\n        {({ ref }) => (\n          <div\n            ref={ref}\n            style={{ position: \"absolute\", top: coords[0], left: coords[1] }}\n          >\n            <BlockInsertBtn onClick={handleBlockInsert} />\n          </div>\n        )}\n      </Reference>\n      {showMenu && (\n        <Popper\n          placement=\"bottom-end\"\n          modifiers={[\n            {\n              name: \"offset\",\n              options: {\n                offset: [25, 10]\n              }\n            }\n          ]}\n        >\n          {({ ref, style, placement, arrowProps }) => (\n            <div\n              ref={ref}\n              style={{ ...style, zIndex: 20 }}\n              data-placement={placement}\n              onMouseDown={e => {\n                if (!e.isDefaultPrevented()) {\n                  e.preventDefault();\n                  setShowMenu(false);\n                  ReactEditor.focus(editor);\n                  editor.selection &&\n                    Transforms.select(editor, editor.selection.focus);\n                }\n              }}\n            >\n              <div ref={toolboxRef}>\n                <ControlsContext.Provider value={controls}>\n                  <StyledToolBox>\n                    <ToolsWrapper>\n                      <BlockInsertControls />\n                    </ToolsWrapper>\n                  </StyledToolBox>\n                  {props.children}\n                </ControlsContext.Provider>\n              </div>\n              <div ref={arrowProps.ref} style={arrowProps.style} />\n            </div>\n          )}\n        </Popper>\n      )}\n    </Manager>\n  );\n}\n","import React, { ReactNode } from \"react\";\nimport groupBy from \"lodash/groupBy\";\nimport { Editor as SlateEditor } from \"slate\";\nimport { useSlate } from \"slate-react\";\nimport { StyledToolBox } from \"../../StyledToolBox\";\nimport { ToolDivider } from \"../../ToolDivider\";\nimport { ToolsWrapper } from \"../../ToolsWrapper\";\nimport { ChiefElement } from \"../../chief/chief\";\nimport { matchesType } from \"../../chief/utils/matches-type\";\nimport { useProvidedControls } from \"../../chief/controls\";\n\nexport function HoverToolControls() {\n  const { controls } = useProvidedControls();\n  const editor = useSlate();\n  const { selection } = editor;\n  if (selection) {\n    const eligableControls = controls.filter(control => {\n      const [match] = SlateEditor.nodes(editor, {\n        match: n => {\n          if (control.typeMatch && typeof n.type === \"string\") {\n            if (matchesType(n as ChiefElement, control.typeMatch)) {\n              return true;\n            }\n          } else if (\n            !control.typeMatch &&\n            !SlateEditor.isVoid(editor, n) &&\n            typeof n.type === \"string\"\n          ) {\n            return true;\n          }\n          return false;\n        }\n      });\n      return Boolean(match);\n    });\n    if (eligableControls.length > 0) {\n      const groupedControls = groupBy(eligableControls, \"category\");\n      return (\n        <StyledToolBox>\n          <ToolsWrapper>\n            {Object.entries(groupedControls).map(\n              ([type, groupedControls], i) => (\n                <React.Fragment key={`${type}${i}`}>\n                  {groupedControls.map((control, ii) => {\n                    if (control.Component) {\n                      return <control.Component key={`${type}${i}${ii}`} />;\n                    }\n                    const renderControl = control.render;\n                    return (\n                      <React.Fragment key={`${type}${i}${ii}`}>\n                        {typeof renderControl === \"function\"\n                          ? renderControl(editor)\n                          : renderControl}\n                      </React.Fragment>\n                    );\n                  })}\n                  <ToolDivider />\n                </React.Fragment>\n              )\n            )}\n          </ToolsWrapper>\n        </StyledToolBox>\n      );\n    }\n  }\n  return null;\n}\n","import React from \"react\";\nimport { Range, Node } from \"slate\";\nimport { useDecoration } from \"../hooks/use-decoration\";\nimport { useRenderLeaf } from \"..\";\n\nexport function useHighlightSelection(\n  selection: Range | null | undefined,\n  style: React.CSSProperties) {\n  useRenderLeaf(\n    {\n      renderLeaf: props => {\n        return (\n          <span\n            style={props.leaf.highlightSelection ? style : undefined}\n            {...props.attributes}\n          >\n            {props.children}\n          </span>\n        );\n      }\n    },\n    [selection]\n  );\n\n  useDecoration(\n    {\n      decorator: ([node]) => {\n        const ranges: Range[] = [];\n        if (selection && Node.has(node, selection.anchor.path)) {\n          ranges.push({ ...selection, highlightSelection: true });\n        }\n        return ranges;\n      }\n    },\n    [selection]\n  );\n}\n","import { useEffect } from \"react\";\nimport { useChief } from \"./use-chief\";\nimport { InjectedDecorator } from \"../chief\";\n\nexport function useDecoration(decoration: InjectedDecorator, deps?: any[]) {\n  const chief = useChief();\n  useEffect(() => {\n    chief.injectDecoration(decoration);\n    return () => chief.removeDecoration(decoration);\n  }, deps);\n}\n","import React, { useEffect, useState, useRef, useContext } from \"react\";\nimport { ReactEditor, useSlate } from \"slate-react\";\nimport { Editor, Range, Transforms } from \"slate\";\nimport { Popper } from \"react-popper\";\nimport { VirtualElement } from \"@popperjs/core\";\nimport { useOnClickOutside, getNodeFromSelection } from \"../../utils\";\nimport { useChief } from \"../../chief/hooks/use-chief\";\nimport { HoverToolControls } from \"./hover-tool-controls\";\nimport { useControlsProvider } from \"../../chief/controls\";\nimport { useHighlightSelection } from \"../../chief/utils/use-highlight-selection\";\nimport { useSaveSelection } from \"../../chief/utils/saved-selection\";\n\nexport const deselect = Transforms.deselect;\nTransforms.deselect = (..._args) => {\n  // We disable the default deselect.\n};\n\ntype HoverToolContext = ReturnType<typeof useProvideContext>[\"ctx\"];\n\nconst hoverToolContext = React.createContext<HoverToolContext | undefined>(\n  undefined\n);\n\nfunction useProvideContext() {\n  const editor = useSlate();\n  const { selection } = editor;\n\n  const isEditorFocused = ReactEditor.isFocused(editor);\n  const isCollapsed = selection && Range.isCollapsed(selection);\n  const isEmpty = selection && Editor.string(editor, selection) === \"\";\n  const currentNode = getNodeFromSelection(editor, selection);\n  const isVoid = Editor.isVoid(editor, currentNode);\n  const isReadOnly = useChief().readOnly;\n  const { savedSelection } = useSaveSelection();\n  useHighlightSelection(savedSelection?.current, {\n    backgroundColor: \"#969696\"\n  });\n\n  // console.log({\n  //   isEditorFocused,\n  //   selection,\n  //   isCollapsed,\n  //   isEmpty,\n  //   isVoid,\n  //   ...ctx\n  // });\n\n  const [enabled, setEnabled] = useState(false);\n\n  useEffect(() => {\n    if (isReadOnly) {\n      setEnabled(false);\n    } else if (ctx.enabled) {\n      if (!savedSelection?.current && isCollapsed && !isVoid) {\n        setEnabled(false);\n      }\n    } else {\n      if (isEditorFocused) {\n        if (isCollapsed && isVoid) {\n          setEnabled(true);\n        } else if (!isCollapsed && !isEmpty) {\n          setEnabled(true);\n        }\n      }\n    }\n  }, [isEditorFocused, isCollapsed, isEmpty, isVoid]);\n\n  const ctx = {\n    enabled\n  };\n\n  return { ctx, setEnabled };\n}\n\nexport function useHoverTool() {\n  const ctx = useContext(hoverToolContext);\n  if (ctx === undefined) {\n    throw new Error(\"useHoverTool must be within a <HoverToolProvider/>\");\n  }\n  return ctx;\n}\n\nexport function HoverTools(props: { children?: React.ReactNode }) {\n  const { ctx, setEnabled } = useProvideContext();\n  const [ControlsContext, controls] = useControlsProvider();\n  return (\n    <hoverToolContext.Provider value={ctx}>\n      <ControlsContext.Provider value={controls}>\n        <HoveringTool\n          onChangeEnabled={enabled => setEnabled(enabled)}\n          enabled={ctx.enabled}\n        >\n          <HoverToolControls />\n        </HoveringTool>\n        {props.children}\n      </ControlsContext.Provider>\n    </hoverToolContext.Provider>\n  );\n}\n\nexport const HoveringTool = (\n  props: {\n    children?: React.ReactNode;\n    enabled: boolean;\n    onChangeEnabled: (enabled: boolean) => void;\n  } & React.HTMLProps<HTMLDivElement>\n) => {\n  const { children, enabled, onChangeEnabled, ...otherProps } = props;\n  const editor = useSlate();\n  const { selection } = editor;\n  const [deltaOffset, setDeltaOffset] = useState(-1);\n  const currentNode = getNodeFromSelection(editor, selection);\n\n  useEffect(() => {\n    const deltaoffset = selection\n      ? selection.focus.offset - selection.anchor.offset\n      : -1;\n    setDeltaOffset(deltaoffset);\n  }, [selection]);\n\n  const toolRef = useRef(null);\n  const [_v, _setV] = useState<VirtualElement>({\n    getBoundingClientRect: () => ({\n      top: -1000,\n      left: -1000,\n      bottom: 0,\n      right: 0,\n      width: 1,\n      height: 1\n    })\n  });\n\n  useOnClickOutside(toolRef, e => {\n    if (currentNode) {\n      const domNode = ReactEditor.toDOMNode(editor, currentNode);\n      if (e.target && domNode.contains(e.target as globalThis.Node)) {\n        return;\n      }\n    }\n    onChangeEnabled(false);\n  });\n\n  useEffect(() => {\n    if (enabled) {\n      const isVoid = Editor.isVoid(editor, currentNode);\n      if (isVoid && currentNode) {\n        try {\n          const domNode = ReactEditor.toDOMNode(editor, currentNode);\n          _setV({\n            getBoundingClientRect: () => domNode.getBoundingClientRect()\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        try {\n          const domSelection = window.getSelection();\n          if (domSelection && domSelection.rangeCount > 0) {\n            const domRange = domSelection.getRangeAt(0);\n            if (domRange && deltaOffset !== -1) {\n              _setV({\n                getBoundingClientRect: () => domRange.getBoundingClientRect()\n              });\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  }, [enabled, deltaOffset, selection, currentNode]);\n\n  if (!enabled || !children) {\n    return null;\n  }\n\n  return (\n    <Popper\n      modifiers={[\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 10]\n          }\n        }\n      ]}\n      placement=\"top-end\"\n      referenceElement={_v}\n    >\n      {({ ref, style, placement, arrowProps }) => (\n        <div\n          ref={ref}\n          style={{ ...style, zIndex: 10 }}\n          data-placement={placement}\n        >\n          <div ref={toolRef} {...otherProps}>\n            {children}\n          </div>\n          <div ref={arrowProps.ref} style={arrowProps.style} />\n        </div>\n      )}\n    </Popper>\n  );\n};\n","import React, { ReactNode, useCallback, useEffect, useRef } from \"react\";\nimport { Text, Transforms } from \"slate\";\nimport { useSlate } from \"slate-react\";\nimport { AddonProps } from \"../../addon\";\nimport { ChiefElement, iPresenter, useRenderLeaf } from \"../../chief\";\nimport { renderLeaf } from \"../../leaf-renderer\";\nimport { StyledToolBox } from \"../../StyledToolBox\";\nimport { ToolbarBtn } from \"../../ToolbarBtn\";\nimport { ToolBtnPopup } from \"../../ToolBtnPopup\";\nimport { useOnClickOutside } from \"../../utils\";\nimport { useControl } from \"../../chief/controls\";\nimport { useSaveSelection } from \"../../chief/utils/saved-selection\";\n\nexport function TextColorAddon() {\n  useRenderLeaf({\n    renderLeaf: props => {\n      if (typeof props.leaf[\"color\"] === \"string\")\n        return (\n          <span\n            style={{ color: props.leaf[\"color\"] as string }}\n            {...props.attributes}\n          >\n            {props.children}\n          </span>\n        );\n      return undefined;\n    }\n  });\n  return null;\n}\n\nexport function TextColorControl(props: {\n  colors?: string[];\n  children: ReactNode;\n}) {\n  function TextColorBtn() {\n    return (\n      <ToolBtnPopup\n        renderContent={setShow => (\n          <StyledToolBox>\n            <ColorSelector\n              colors={\n                props.colors || [\n                  \"rgb(142, 209, 252)\",\n                  \"rgb(132, 109, 52)\",\n                  \"rgb(42, 09, 232)\",\n                  \"rgb(54, 209, 12)\"\n                ]\n              }\n              onClose={() => setShow(false)}\n            />\n          </StyledToolBox>\n        )}\n        renderToolBtn={(tprops, show) => (\n          <ToolbarBtn\n            tooltip={{\n              label: {\n                key: \"marks.textcolor\",\n                defaultLabel: \"Textcolor\"\n              }\n            }}\n            {...tprops}\n            isActive={show}\n          >\n            {props.children}\n          </ToolbarBtn>\n        )}\n      />\n    );\n  }\n  return useControl({\n    category: \"color\",\n    Component: TextColorBtn\n  });\n}\n\nconst Presenter: iPresenter<{ url: string } & ChiefElement> = {\n  leaf: {\n    renderLeaf: props =>\n      renderLeaf(props, \"color\", \"span\", {\n        style: { color: props.leaf[\"color\"] }\n      })\n  }\n};\nTextColorAddon.Presenter = Presenter;\n\nfunction ColorSelector(props: { onClose: () => void; colors: string[] }) {\n  const editor = useSlate();\n  const { onClose, colors } = props;\n  const { selection } = editor;\n  const { saveSelection } = useSaveSelection();\n  useEffect(() => {\n    return saveSelection(selection);\n  }, []);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  useOnClickOutside(wrapperRef, () => {\n    onClose();\n  });\n  const handleChangeTextColor = useCallback(\n    (color?: string) => {\n      Transforms.setNodes(\n        editor,\n        { color },\n        { match: n => Text.isText(n), split: true }\n      );\n      onClose();\n    },\n    [colors]\n  );\n\n  return (\n    <div\n      ref={wrapperRef}\n      style={{\n        padding: 9,\n        display: \"flex\",\n        flexDirection: \"row\"\n      }}\n    >\n      <div style={{ display: \"flex\" }}>\n        <div\n          onClick={() => handleChangeTextColor(undefined)}\n          style={{\n            width: 18,\n            height: 18,\n            margin: 2,\n            backgroundColor: \"none\",\n            cursor: \"pointer\"\n          }}\n        />\n        {colors.map((color, i) => {\n          return (\n            <div\n              key={i}\n              onClick={() => handleChangeTextColor(color)}\n              style={{\n                width: 18,\n                height: 18,\n                margin: 2,\n                backgroundColor: color,\n                cursor: \"pointer\"\n              }}\n            />\n          );\n        })}\n      </div>\n      {/* <div style={{ display: \"flex\" }}>\n        {bgColors.map(color => {\n          return (\n            <div\n              onClick={handleChangeBgColor}\n              style={{\n                width: 18,\n                height: 18,\n                margin: 2,\n                backgroundColor: color,\n                cursor: \"pointer\"\n              }}\n            />\n          );\n        })}\n      </div> */}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Editor,\n  Chief,\n  // Addons\n  HeadingsAddon,\n  BoldAddon,\n  ItalicAddon,\n  UnderlineAddon,\n  StrikethroughAddon,\n  ImageAddon,\n  ResetToParagraphAddon,\n  PreventNewlineAddon,\n  ListsAddon,\n  BlockTabAddon,\n  ParagraphAddon,\n  LabelsAddon,\n  // Block toolbar addon\n  BlockInsert,\n  BlockInsertControls,\n  // Custom addon creation\n  AddonProps,\n  useRenderElement,\n  InputWrapper,\n  usePlugin,\n  // Presentation\n  ChiefPresentation,\n  BoldControl,\n  HeadingControl,\n  ItalicControl,\n  StrikethroughControl,\n  UnderlineControl,\n  HoverTools,\n  ImageControl,\n  ListControl,\n  TextColorAddon,\n  TextColorControl,\n  LinkAddon,\n  LinkControl,\n  ParagraphControl\n} from \"react-chief-editor\";\nimport { Node, Element } from \"slate\";\nimport styled, { css } from \"styled-components\";\nimport MdiIcon from \"@mdi/react\";\nimport {\n  mdiFormatParagraph,\n  mdiFormatHeader1,\n  mdiFormatHeader2,\n  mdiFormatHeader3,\n  mdiFormatHeader4,\n  mdiFormatHeader5,\n  mdiFormatHeader6,\n  mdiFormatListNumbered,\n  mdiFormatListBulleted,\n  mdiFormatBold,\n  mdiFormatItalic,\n  mdiFormatStrikethrough,\n  mdiFormatUnderline,\n  mdiImage,\n  mdiLink,\n  mdiFormatColorText\n} from \"@mdi/js\";\n\nfunction Icon(props: React.ComponentProps<typeof MdiIcon>) {\n  return <MdiIcon color=\"#2b2b2b\" size={0.7} {...props}></MdiIcon>;\n}\n\nconst editorLabels = {\n  \"marks.bold\": \"Fed\",\n  \"marks.italic\": \"Kursiv\",\n  \"marks.strikethrough\": \"Gennemstreg\",\n  \"marks.underline\": \"Understreg\",\n  \"marks.textcolor\": \"Tekstfarve\",\n  \"elements.image\": \"Billede\",\n  \"elements.link\": \"Link\",\n  \"elements.ordered-list\": \"Nummereret list\",\n  \"elements.unordered-list\": \"Punkt list\",\n  \"elements.link.placeholder\": \"Indsæt eller skriv link\",\n  \"elements.link.btn.link\": \"Tilføj\",\n  \"elements.link.btn.unlink\": \"Fjern\",\n  \"elements.paragraph.hint\": \"Klik for at redigere\",\n  \"elements.paragraph.placeholder\": \"Tekst\",\n  \"elements.heading.h1.placeholder\": \"Overskrift 1\",\n  \"elements.heading.h2.placeholder\": \"Overskrift 2\",\n  \"elements.heading.h3.placeholder\": \"Overskrift 3\",\n  \"elements.heading.h4.placeholder\": \"Overskrift 4\",\n  \"elements.heading.h5.placeholder\": \"Overskrift 5\",\n  \"elements.heading.h6.placeholder\": \"Overskrift 6\"\n};\n\nfunction ExampleCustomAddon(props: AddonProps) {\n  usePlugin({\n    isVoid: isVoid => element =>\n      Element.isElement(element) && element.type === \"custom_void_element\"\n        ? true\n        : isVoid(element)\n  });\n\n  useRenderElement({\n    typeMatch: /custom_void_element/,\n    renderElement: (props, editor) => {\n      return (\n        <div {...props.attributes}>\n          <InputWrapper>\n            <input type=\"text\" />\n          </InputWrapper>\n          {props.children}\n        </div>\n      );\n    }\n  });\n\n  return null;\n}\n\nconst ContentStyle = styled.div`\n  font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n  color: white;\n  font-size: 18px;\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    color: white;\n  }\n  a {\n    color: rgb(234 66 205);\n  }\n`;\n\nfunction App() {\n  const [value, setValue] = useState<Node[]>([\n    {\n      type: \"h1\",\n      children: [{ text: \"1914-oversættelsen af Rackham\" }]\n    },\n    {\n      type: \"paragraph\",\n      children: [\n        {\n          text:\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness.\"\n        }\n      ]\n    },\n    {\n      type: \"paragraph\",\n      children: [\n        {\n          color: \"#00b159\",\n          text:\n            \"No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"\n        }\n      ]\n    },\n    {\n      type: \"h1\",\n      children: [{ text: \"Righteous\" }]\n    },\n    {\n      type: \"image\",\n      width: 700,\n      height: 420,\n      align: \"left\",\n      url:\n        \"https://everything-pr.com/wp-content/uploads/2010/08/Funny-Meme.jpg\",\n      children: [\n        {\n          text: \"asd\"\n        }\n      ]\n    },\n    {\n      type: \"h1\",\n      children: [{ text: \"Extremely\" }]\n    },\n    {\n      type: \"h2\",\n      children: [{ text: \"Ordered\" }]\n    },\n    {\n      type: \"ordered-list\",\n      children: [\n        { type: \"list-item\", children: [{ text: \"Molestias\" }] },\n        { type: \"list-item\", children: [{ text: \"Minus\" }] }\n      ]\n    },\n    {\n      type: \"h2\",\n      children: [{ text: \"Unordered\" }]\n    },\n    {\n      type: \"unordered-list\",\n      children: [\n        { type: \"list-item\", children: [{ text: \"Through \" }] },\n        { type: \"list-item\", children: [{ text: \"Tough Ø Å\" }] }\n      ]\n    }\n  ]);\n\n  console.log(value);\n\n  return (\n    <div style={{ padding: \"1em\" }}>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <div style={{ flex: 1 }}>\n          <ContentStyle>\n            <Chief\n              value={value}\n              onChange={value => setValue(value)}\n              theme={{\n                overrides: {\n                  // StyledToolbarBtn: css`\n                  //   background-color: transparent;\n                  //   color: white;\n                  //   padding: 10px;\n                  //   &:hover {\n                  //     background-color: ${props =>\n                  //       // @ts-ignore\n                  //       props.disabled ? undefined : \"#2d2d2d\"};\n                  //   }\n                  // `,\n                  // StyledToolBox: css`\n                  //   border-radius: 20px;\n                  //   background-color: black;\n                  // `,\n                  // ui: css`\n                  //   /* font-family: monospace; */\n                  // `\n                }\n              }}\n            >\n              <LabelsAddon labels={editorLabels} />\n              <ParagraphAddon />\n              <BoldAddon />\n              <ItalicAddon />\n              <UnderlineAddon />\n              <StrikethroughAddon />\n              <HeadingsAddon />\n              <ImageAddon />\n              <ResetToParagraphAddon />\n              <PreventNewlineAddon />\n              <PreventNewlineAddon />\n              <LinkAddon />\n              <ListsAddon />\n              <BlockTabAddon />\n              <TextColorAddon />\n              <div\n                style={{\n                  marginLeft: 20\n                }}\n              >\n                <BlockInsert>\n                  <ParagraphControl>\n                    <Icon path={mdiFormatParagraph} />\n                  </ParagraphControl>\n                  <HeadingControl heading=\"h1\">\n                    <Icon path={mdiFormatHeader1} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h2\">\n                    <Icon path={mdiFormatHeader2} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h3\">\n                    <Icon path={mdiFormatHeader3} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h4\">\n                    <Icon path={mdiFormatHeader4} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h5\">\n                    <Icon path={mdiFormatHeader5} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h6\">\n                    <Icon path={mdiFormatHeader6} />\n                  </HeadingControl>\n                  <ListControl type=\"ordered-list\">\n                    <Icon path={mdiFormatListNumbered} />\n                  </ListControl>\n                  <ListControl type=\"unordered-list\">\n                    <Icon path={mdiFormatListBulleted} />\n                  </ListControl>\n                  <ImageControl>\n                    <Icon path={mdiImage} />\n                  </ImageControl>\n                </BlockInsert>\n                <HoverTools>\n                  <BoldControl>\n                    <Icon path={mdiFormatBold} />\n                  </BoldControl>\n                  <ItalicControl>\n                    <Icon path={mdiFormatItalic} />\n                  </ItalicControl>\n                  <StrikethroughControl>\n                    <Icon path={mdiFormatStrikethrough} />\n                  </StrikethroughControl>\n                  <UnderlineControl>\n                    <Icon path={mdiFormatUnderline} />\n                  </UnderlineControl>\n                  <HeadingControl heading=\"h1\">\n                    <Icon path={mdiFormatHeader1} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h2\">\n                    <Icon path={mdiFormatHeader2} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h3\">\n                    <Icon path={mdiFormatHeader3} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h4\">\n                    <Icon path={mdiFormatHeader4} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h5\">\n                    <Icon path={mdiFormatHeader5} />\n                  </HeadingControl>\n                  <HeadingControl heading=\"h6\">\n                    <Icon path={mdiFormatHeader6} />\n                  </HeadingControl>\n                  <LinkControl>\n                    <Icon path={mdiLink} />\n                  </LinkControl>\n                  <TextColorControl\n                    colors={[\n                      \"#d11141\",\n                      \"#00b159\",\n                      \"#00aedb\",\n                      \"#f37735\",\n                      \"#ffc425\",\n                      \"#edc951\",\n                      \"#eb6841\",\n                      \"#cc2a36\",\n                      \"#4f372d\",\n                      \"#00a0b0\"\n                    ]}\n                  >\n                    <Icon path={mdiFormatColorText} />\n                  </TextColorControl>\n                </HoverTools>\n                <Editor\n                  spellCheck={false}\n                  style={{ overflow: \"auto\", minHeight: 500 }}\n                ></Editor>\n              </div>\n            </Chief>\n          </ContentStyle>\n        </div>\n        {/* <div style={{ flex: 1 }}>\n          <ContentStyle>\n            <ChiefPresentation\n              value={value}\n              presenters={[\n                ParagraphAddon.Presenter,\n                BoldAddon.Presenter,\n                ItalicAddon.Presenter,\n                StrikethroughAddon.Presenter,\n                UnderlineAddon.Presenter,\n                HeadingsAddon.Presenter,\n                LinkAddon.Presenter,\n                ListsAddon.Presenter,\n                ImageAddon.Presenter,\n                TextColorAddon.Presenter\n              ]}\n            ></ChiefPresentation>\n          </ContentStyle>\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}